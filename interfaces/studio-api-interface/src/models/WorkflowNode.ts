/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WorkflowNodeData } from './WorkflowNodeData';
import {
    WorkflowNodeDataFromJSON,
    WorkflowNodeDataFromJSONTyped,
    WorkflowNodeDataToJSON,
} from './WorkflowNodeData';
import type { WorkflowNodePosition } from './WorkflowNodePosition';
import {
    WorkflowNodePositionFromJSON,
    WorkflowNodePositionFromJSONTyped,
    WorkflowNodePositionToJSON,
} from './WorkflowNodePosition';

/**
 * 
 * @export
 * @interface WorkflowNode
 */
export interface WorkflowNode {
    /**
     * 
     * @type {string}
     * @memberof WorkflowNode
     */
    id: string;
    /**
     * 
     * @type {WorkflowNodePosition}
     * @memberof WorkflowNode
     */
    position: WorkflowNodePosition;
    /**
     * 
     * @type {string}
     * @memberof WorkflowNode
     */
    type?: string;
    /**
     * 
     * @type {WorkflowNodeData}
     * @memberof WorkflowNode
     */
    data: WorkflowNodeData;
}

/**
 * Check if a given object implements the WorkflowNode interface.
 */
export function instanceOfWorkflowNode(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "position" in value;
    isInstance = isInstance && "data" in value;

    return isInstance;
}

export function WorkflowNodeFromJSON(json: any): WorkflowNode {
    return WorkflowNodeFromJSONTyped(json, false);
}

export function WorkflowNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowNode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'position': WorkflowNodePositionFromJSON(json['position']),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'data': WorkflowNodeDataFromJSON(json['data']),
    };
}

export function WorkflowNodeToJSON(value?: WorkflowNode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'position': WorkflowNodePositionToJSON(value.position),
        'type': value.type,
        'data': WorkflowNodeDataToJSON(value.data),
    };
}

