/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WorkflowEdge } from './WorkflowEdge';
import {
    WorkflowEdgeFromJSON,
    WorkflowEdgeFromJSONTyped,
    WorkflowEdgeToJSON,
} from './WorkflowEdge';
import type { WorkflowNode } from './WorkflowNode';
import {
    WorkflowNodeFromJSON,
    WorkflowNodeFromJSONTyped,
    WorkflowNodeToJSON,
} from './WorkflowNode';

/**
 * 
 * @export
 * @interface WorkflowTreeDTO
 */
export interface WorkflowTreeDTO {
    /**
     * 
     * @type {Array<WorkflowNode>}
     * @memberof WorkflowTreeDTO
     */
    nodes: Array<WorkflowNode>;
    /**
     * 
     * @type {Array<WorkflowEdge>}
     * @memberof WorkflowTreeDTO
     */
    edges: Array<WorkflowEdge>;
}

/**
 * Check if a given object implements the WorkflowTreeDTO interface.
 */
export function instanceOfWorkflowTreeDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "nodes" in value;
    isInstance = isInstance && "edges" in value;

    return isInstance;
}

export function WorkflowTreeDTOFromJSON(json: any): WorkflowTreeDTO {
    return WorkflowTreeDTOFromJSONTyped(json, false);
}

export function WorkflowTreeDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTreeDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nodes': ((json['nodes'] as Array<any>).map(WorkflowNodeFromJSON)),
        'edges': ((json['edges'] as Array<any>).map(WorkflowEdgeFromJSON)),
    };
}

export function WorkflowTreeDTOToJSON(value?: WorkflowTreeDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nodes': ((value.nodes as Array<any>).map(WorkflowNodeToJSON)),
        'edges': ((value.edges as Array<any>).map(WorkflowEdgeToJSON)),
    };
}

