/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IcalAttachment } from './IcalAttachment';
import {
    IcalAttachmentFromJSON,
    IcalAttachmentFromJSONTyped,
    IcalAttachmentToJSON,
} from './IcalAttachment';
import type { KeyValueStringPair } from './KeyValueStringPair';
import {
    KeyValueStringPairFromJSON,
    KeyValueStringPairFromJSONTyped,
    KeyValueStringPairToJSON,
} from './KeyValueStringPair';

/**
 * 
 * @export
 * @interface MailConfigurationOptions
 */
export interface MailConfigurationOptions {
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    cc?: string;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    bcc?: string;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    replyTo?: string;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    subject: string;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    html?: string;
    /**
     * 
     * @type {IcalAttachment}
     * @memberof MailConfigurationOptions
     */
    icalEvent?: IcalAttachment;
    /**
     * 
     * @type {Array<KeyValueStringPair>}
     * @memberof MailConfigurationOptions
     */
    headers?: Array<KeyValueStringPair>;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    encoding?: string;
    /**
     * 
     * @type {string}
     * @memberof MailConfigurationOptions
     */
    priority: MailConfigurationOptionsPriorityEnum;
}


/**
 * @export
 */
export const MailConfigurationOptionsPriorityEnum = {
    high: 'high',
    normal: 'normal',
    low: 'low'
} as const;
export type MailConfigurationOptionsPriorityEnum = typeof MailConfigurationOptionsPriorityEnum[keyof typeof MailConfigurationOptionsPriorityEnum];


/**
 * Check if a given object implements the MailConfigurationOptions interface.
 */
export function instanceOfMailConfigurationOptions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "priority" in value;

    return isInstance;
}

export function MailConfigurationOptionsFromJSON(json: any): MailConfigurationOptions {
    return MailConfigurationOptionsFromJSONTyped(json, false);
}

export function MailConfigurationOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MailConfigurationOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from': json['from'],
        'to': json['to'],
        'cc': !exists(json, 'cc') ? undefined : json['cc'],
        'bcc': !exists(json, 'bcc') ? undefined : json['bcc'],
        'replyTo': !exists(json, 'replyTo') ? undefined : json['replyTo'],
        'subject': json['subject'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'html': !exists(json, 'html') ? undefined : json['html'],
        'icalEvent': !exists(json, 'icalEvent') ? undefined : IcalAttachmentFromJSON(json['icalEvent']),
        'headers': !exists(json, 'headers') ? undefined : ((json['headers'] as Array<any>).map(KeyValueStringPairFromJSON)),
        'encoding': !exists(json, 'encoding') ? undefined : json['encoding'],
        'priority': json['priority'],
    };
}

export function MailConfigurationOptionsToJSON(value?: MailConfigurationOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from': value.from,
        'to': value.to,
        'cc': value.cc,
        'bcc': value.bcc,
        'replyTo': value.replyTo,
        'subject': value.subject,
        'text': value.text,
        'html': value.html,
        'icalEvent': IcalAttachmentToJSON(value.icalEvent),
        'headers': value.headers === undefined ? undefined : ((value.headers as Array<any>).map(KeyValueStringPairToJSON)),
        'encoding': value.encoding,
        'priority': value.priority,
    };
}

