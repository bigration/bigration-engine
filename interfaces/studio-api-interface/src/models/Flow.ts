/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Flow
 */
export interface Flow {
    /**
     * 
     * @type {string}
     * @memberof Flow
     */
    sourceId: string;
    /**
     * 
     * @type {string}
     * @memberof Flow
     */
    sourceType: FlowSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Flow
     */
    sourceHandle: FlowSourceHandleEnum;
    /**
     * 
     * @type {string}
     * @memberof Flow
     */
    targetId: string;
    /**
     * 
     * @type {string}
     * @memberof Flow
     */
    targetType: FlowTargetTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Flow
     */
    targetHandle: FlowTargetHandleEnum;
}


/**
 * @export
 */
export const FlowSourceTypeEnum = {
    TRIGGER: 'TRIGGER',
    REST: 'REST',
    MAIL: 'MAIL',
    FIND_AND_TRANSFORM: 'FIND_AND_TRANSFORM',
    FILTER: 'FILTER',
    VALUE_GETTER: 'VALUE_GETTER',
    REGEX: 'REGEX',
    CONDITIONAL_PATH: 'CONDITIONAL_PATH',
    MULTI_CONDITIONAL_PATH: 'MULTI_CONDITIONAL_PATH',
    SWITCH: 'SWITCH',
    LOOP: 'LOOP',
    PARALLEL: 'PARALLEL',
    DATA_MANIPULATION: 'DATA_MANIPULATION',
    DATABASE: 'DATABASE',
    TELEGRAM: 'TELEGRAM',
    LOGGER: 'LOGGER',
    GLOBAL_VARIABLES: 'GLOBAL_VARIABLES',
    OPENAI: 'OPENAI',
    WORKFLOW_EVENT: 'WORKFLOW_EVENT'
} as const;
export type FlowSourceTypeEnum = typeof FlowSourceTypeEnum[keyof typeof FlowSourceTypeEnum];

/**
 * @export
 */
export const FlowSourceHandleEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D'
} as const;
export type FlowSourceHandleEnum = typeof FlowSourceHandleEnum[keyof typeof FlowSourceHandleEnum];

/**
 * @export
 */
export const FlowTargetTypeEnum = {
    TRIGGER: 'TRIGGER',
    REST: 'REST',
    MAIL: 'MAIL',
    FIND_AND_TRANSFORM: 'FIND_AND_TRANSFORM',
    FILTER: 'FILTER',
    VALUE_GETTER: 'VALUE_GETTER',
    REGEX: 'REGEX',
    CONDITIONAL_PATH: 'CONDITIONAL_PATH',
    MULTI_CONDITIONAL_PATH: 'MULTI_CONDITIONAL_PATH',
    SWITCH: 'SWITCH',
    LOOP: 'LOOP',
    PARALLEL: 'PARALLEL',
    DATA_MANIPULATION: 'DATA_MANIPULATION',
    DATABASE: 'DATABASE',
    TELEGRAM: 'TELEGRAM',
    LOGGER: 'LOGGER',
    GLOBAL_VARIABLES: 'GLOBAL_VARIABLES',
    OPENAI: 'OPENAI',
    WORKFLOW_EVENT: 'WORKFLOW_EVENT'
} as const;
export type FlowTargetTypeEnum = typeof FlowTargetTypeEnum[keyof typeof FlowTargetTypeEnum];

/**
 * @export
 */
export const FlowTargetHandleEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D'
} as const;
export type FlowTargetHandleEnum = typeof FlowTargetHandleEnum[keyof typeof FlowTargetHandleEnum];


/**
 * Check if a given object implements the Flow interface.
 */
export function instanceOfFlow(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sourceId" in value;
    isInstance = isInstance && "sourceType" in value;
    isInstance = isInstance && "sourceHandle" in value;
    isInstance = isInstance && "targetId" in value;
    isInstance = isInstance && "targetType" in value;
    isInstance = isInstance && "targetHandle" in value;

    return isInstance;
}

export function FlowFromJSON(json: any): Flow {
    return FlowFromJSONTyped(json, false);
}

export function FlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): Flow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceId': json['sourceId'],
        'sourceType': json['sourceType'],
        'sourceHandle': json['sourceHandle'],
        'targetId': json['targetId'],
        'targetType': json['targetType'],
        'targetHandle': json['targetHandle'],
    };
}

export function FlowToJSON(value?: Flow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceId': value.sourceId,
        'sourceType': value.sourceType,
        'sourceHandle': value.sourceHandle,
        'targetId': value.targetId,
        'targetType': value.targetType,
        'targetHandle': value.targetHandle,
    };
}

