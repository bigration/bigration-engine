/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WorkflowNodeActionInstanceData
 */
export interface WorkflowNodeActionInstanceData {
    /**
     * 
     * @type {string}
     * @memberof WorkflowNodeActionInstanceData
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowNodeActionInstanceData
     */
    actionId: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowNodeActionInstanceData
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowNodeActionInstanceData
     */
    type: WorkflowNodeActionInstanceDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof WorkflowNodeActionInstanceData
     */
    instanceId: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowNodeActionInstanceData
     */
    status: WorkflowNodeActionInstanceDataStatusEnum;
    /**
     * 
     * @type {object}
     * @memberof WorkflowNodeActionInstanceData
     */
    outputValues?: object;
    /**
     * 
     * @type {number}
     * @memberof WorkflowNodeActionInstanceData
     */
    executionTime?: number;
}


/**
 * @export
 */
export const WorkflowNodeActionInstanceDataTypeEnum = {
    TRIGGER: 'TRIGGER',
    REST: 'REST',
    MAIL: 'MAIL',
    FIND_AND_TRANSFORM: 'FIND_AND_TRANSFORM',
    FILTER: 'FILTER',
    VALUE_GETTER: 'VALUE_GETTER',
    REGEX: 'REGEX',
    CONDITIONAL_PATH: 'CONDITIONAL_PATH',
    MULTI_CONDITIONAL_PATH: 'MULTI_CONDITIONAL_PATH',
    SWITCH: 'SWITCH',
    LOOP: 'LOOP',
    PARALLEL: 'PARALLEL',
    DATA_MANIPULATION: 'DATA_MANIPULATION',
    DATABASE: 'DATABASE',
    TELEGRAM: 'TELEGRAM',
    LOGGER: 'LOGGER',
    GLOBAL_VARIABLES: 'GLOBAL_VARIABLES',
    OPENAI: 'OPENAI',
    WORKFLOW_EVENT: 'WORKFLOW_EVENT'
} as const;
export type WorkflowNodeActionInstanceDataTypeEnum = typeof WorkflowNodeActionInstanceDataTypeEnum[keyof typeof WorkflowNodeActionInstanceDataTypeEnum];

/**
 * @export
 */
export const WorkflowNodeActionInstanceDataStatusEnum = {
    READY: 'READY',
    RUNNING: 'RUNNING',
    ERROR: 'ERROR',
    FINISHED: 'FINISHED',
    OUT_OF_QUOTA: 'OUT_OF_QUOTA'
} as const;
export type WorkflowNodeActionInstanceDataStatusEnum = typeof WorkflowNodeActionInstanceDataStatusEnum[keyof typeof WorkflowNodeActionInstanceDataStatusEnum];


/**
 * Check if a given object implements the WorkflowNodeActionInstanceData interface.
 */
export function instanceOfWorkflowNodeActionInstanceData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "actionId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "instanceId" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function WorkflowNodeActionInstanceDataFromJSON(json: any): WorkflowNodeActionInstanceData {
    return WorkflowNodeActionInstanceDataFromJSONTyped(json, false);
}

export function WorkflowNodeActionInstanceDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowNodeActionInstanceData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'actionId': json['actionId'],
        'name': json['name'],
        'type': json['type'],
        'instanceId': json['instanceId'],
        'status': json['status'],
        'outputValues': !exists(json, 'outputValues') ? undefined : json['outputValues'],
        'executionTime': !exists(json, 'executionTime') ? undefined : json['executionTime'],
    };
}

export function WorkflowNodeActionInstanceDataToJSON(value?: WorkflowNodeActionInstanceData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'actionId': value.actionId,
        'name': value.name,
        'type': value.type,
        'instanceId': value.instanceId,
        'status': value.status,
        'outputValues': value.outputValues,
        'executionTime': value.executionTime,
    };
}

