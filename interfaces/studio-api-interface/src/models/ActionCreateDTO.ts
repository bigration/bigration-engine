/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionConfiguration } from './ActionConfiguration';
import {
    ActionConfigurationFromJSON,
    ActionConfigurationFromJSONTyped,
    ActionConfigurationToJSON,
} from './ActionConfiguration';
import type { WorkflowNodePosition } from './WorkflowNodePosition';
import {
    WorkflowNodePositionFromJSON,
    WorkflowNodePositionFromJSONTyped,
    WorkflowNodePositionToJSON,
} from './WorkflowNodePosition';

/**
 * 
 * @export
 * @interface ActionCreateDTO
 */
export interface ActionCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof ActionCreateDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ActionCreateDTO
     */
    workflowId: string;
    /**
     * 
     * @type {string}
     * @memberof ActionCreateDTO
     */
    type: ActionCreateDTOTypeEnum;
    /**
     * 
     * @type {ActionConfiguration}
     * @memberof ActionCreateDTO
     */
    config: ActionConfiguration;
    /**
     * 
     * @type {WorkflowNodePosition}
     * @memberof ActionCreateDTO
     */
    position: WorkflowNodePosition;
}


/**
 * @export
 */
export const ActionCreateDTOTypeEnum = {
    TRIGGER: 'TRIGGER',
    REST: 'REST',
    MAIL: 'MAIL',
    FIND_AND_TRANSFORM: 'FIND_AND_TRANSFORM',
    FILTER: 'FILTER',
    VALUE_GETTER: 'VALUE_GETTER',
    REGEX: 'REGEX',
    CONDITIONAL_PATH: 'CONDITIONAL_PATH',
    MULTI_CONDITIONAL_PATH: 'MULTI_CONDITIONAL_PATH',
    SWITCH: 'SWITCH',
    LOOP: 'LOOP',
    PARALLEL: 'PARALLEL',
    DATA_MANIPULATION: 'DATA_MANIPULATION',
    DATABASE: 'DATABASE',
    TELEGRAM: 'TELEGRAM',
    LOGGER: 'LOGGER',
    GLOBAL_VARIABLES: 'GLOBAL_VARIABLES',
    OPENAI: 'OPENAI',
    WORKFLOW_EVENT: 'WORKFLOW_EVENT'
} as const;
export type ActionCreateDTOTypeEnum = typeof ActionCreateDTOTypeEnum[keyof typeof ActionCreateDTOTypeEnum];


/**
 * Check if a given object implements the ActionCreateDTO interface.
 */
export function instanceOfActionCreateDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "workflowId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "config" in value;
    isInstance = isInstance && "position" in value;

    return isInstance;
}

export function ActionCreateDTOFromJSON(json: any): ActionCreateDTO {
    return ActionCreateDTOFromJSONTyped(json, false);
}

export function ActionCreateDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActionCreateDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'workflowId': json['workflowId'],
        'type': json['type'],
        'config': ActionConfigurationFromJSON(json['config']),
        'position': WorkflowNodePositionFromJSON(json['position']),
    };
}

export function ActionCreateDTOToJSON(value?: ActionCreateDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'workflowId': value.workflowId,
        'type': value.type,
        'config': ActionConfigurationToJSON(value.config),
        'position': WorkflowNodePositionToJSON(value.position),
    };
}

