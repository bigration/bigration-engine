/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InstanceLogModel
 */
export interface InstanceLogModel {
    /**
     * 
     * @type {string}
     * @memberof InstanceLogModel
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof InstanceLogModel
     */
    eventTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof InstanceLogModel
     */
    nanoseconds: number;
    /**
     * 
     * @type {string}
     * @memberof InstanceLogModel
     */
    instanceId: string;
    /**
     * 
     * @type {string}
     * @memberof InstanceLogModel
     */
    sourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof InstanceLogModel
     */
    targetId?: string;
    /**
     * 
     * @type {string}
     * @memberof InstanceLogModel
     */
    type: InstanceLogModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InstanceLogModel
     */
    raw?: string;
    /**
     * 
     * @type {string}
     * @memberof InstanceLogModel
     */
    logKey: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof InstanceLogModel
     */
    logVars?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof InstanceLogModel
     */
    references?: string;
}


/**
 * @export
 */
export const InstanceLogModelTypeEnum = {
    OK: 'OK',
    WARNING: 'WARNING',
    ERROR: 'ERROR'
} as const;
export type InstanceLogModelTypeEnum = typeof InstanceLogModelTypeEnum[keyof typeof InstanceLogModelTypeEnum];


/**
 * Check if a given object implements the InstanceLogModel interface.
 */
export function instanceOfInstanceLogModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "nanoseconds" in value;
    isInstance = isInstance && "instanceId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "logKey" in value;

    return isInstance;
}

export function InstanceLogModelFromJSON(json: any): InstanceLogModel {
    return InstanceLogModelFromJSONTyped(json, false);
}

export function InstanceLogModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstanceLogModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'eventTime': !exists(json, 'eventTime') ? undefined : (new Date(json['eventTime'])),
        'nanoseconds': json['nanoseconds'],
        'instanceId': json['instanceId'],
        'sourceId': !exists(json, 'sourceId') ? undefined : json['sourceId'],
        'targetId': !exists(json, 'targetId') ? undefined : json['targetId'],
        'type': json['type'],
        'raw': !exists(json, 'raw') ? undefined : json['raw'],
        'logKey': json['logKey'],
        'logVars': !exists(json, 'logVars') ? undefined : json['logVars'],
        'references': !exists(json, 'references') ? undefined : json['references'],
    };
}

export function InstanceLogModelToJSON(value?: InstanceLogModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'eventTime': value.eventTime === undefined ? undefined : (value.eventTime.toISOString()),
        'nanoseconds': value.nanoseconds,
        'instanceId': value.instanceId,
        'sourceId': value.sourceId,
        'targetId': value.targetId,
        'type': value.type,
        'raw': value.raw,
        'logKey': value.logKey,
        'logVars': value.logVars,
        'references': value.references,
    };
}

