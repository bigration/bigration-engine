/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionConfiguration } from './ActionConfiguration';
import {
    ActionConfigurationFromJSON,
    ActionConfigurationFromJSONTyped,
    ActionConfigurationToJSON,
} from './ActionConfiguration';
import type { Flow } from './Flow';
import {
    FlowFromJSON,
    FlowFromJSONTyped,
    FlowToJSON,
} from './Flow';
import type { InputParameter } from './InputParameter';
import {
    InputParameterFromJSON,
    InputParameterFromJSONTyped,
    InputParameterToJSON,
} from './InputParameter';

/**
 * 
 * @export
 * @interface ActionModel
 */
export interface ActionModel {
    /**
     * 
     * @type {string}
     * @memberof ActionModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionModel
     */
    workspaceId: string;
    /**
     * 
     * @type {string}
     * @memberof ActionModel
     */
    workflowId: string;
    /**
     * 
     * @type {string}
     * @memberof ActionModel
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ActionModel
     */
    type: ActionModelTypeEnum;
    /**
     * 
     * @type {ActionConfiguration}
     * @memberof ActionModel
     */
    config: ActionConfiguration;
    /**
     * 
     * @type {Array<InputParameter>}
     * @memberof ActionModel
     */
    inputParameters: Array<InputParameter>;
    /**
     * 
     * @type {Array<Flow>}
     * @memberof ActionModel
     */
    outgoingFlows: Array<Flow>;
    /**
     * 
     * @type {string}
     * @memberof ActionModel
     */
    involvedIntegrationId?: string;
    /**
     * 
     * @type {number}
     * @memberof ActionModel
     */
    version?: number;
    /**
     * 
     * @type {Date}
     * @memberof ActionModel
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ActionModel
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ActionModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionModel
     */
    userId?: string;
}


/**
 * @export
 */
export const ActionModelTypeEnum = {
    TRIGGER: 'TRIGGER',
    REST: 'REST',
    MAIL: 'MAIL',
    FIND_AND_TRANSFORM: 'FIND_AND_TRANSFORM',
    FILTER: 'FILTER',
    VALUE_GETTER: 'VALUE_GETTER',
    REGEX: 'REGEX',
    CONDITIONAL_PATH: 'CONDITIONAL_PATH',
    MULTI_CONDITIONAL_PATH: 'MULTI_CONDITIONAL_PATH',
    SWITCH: 'SWITCH',
    LOOP: 'LOOP',
    PARALLEL: 'PARALLEL',
    DATA_MANIPULATION: 'DATA_MANIPULATION',
    DATABASE: 'DATABASE',
    TELEGRAM: 'TELEGRAM',
    LOGGER: 'LOGGER',
    GLOBAL_VARIABLES: 'GLOBAL_VARIABLES',
    OPENAI: 'OPENAI',
    WORKFLOW_EVENT: 'WORKFLOW_EVENT'
} as const;
export type ActionModelTypeEnum = typeof ActionModelTypeEnum[keyof typeof ActionModelTypeEnum];


/**
 * Check if a given object implements the ActionModel interface.
 */
export function instanceOfActionModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "workspaceId" in value;
    isInstance = isInstance && "workflowId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "config" in value;
    isInstance = isInstance && "inputParameters" in value;
    isInstance = isInstance && "outgoingFlows" in value;

    return isInstance;
}

export function ActionModelFromJSON(json: any): ActionModel {
    return ActionModelFromJSONTyped(json, false);
}

export function ActionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'workspaceId': json['workspaceId'],
        'workflowId': json['workflowId'],
        'name': json['name'],
        'type': json['type'],
        'config': ActionConfigurationFromJSON(json['config']),
        'inputParameters': ((json['inputParameters'] as Array<any>).map(InputParameterFromJSON)),
        'outgoingFlows': ((json['outgoingFlows'] as Array<any>).map(FlowFromJSON)),
        'involvedIntegrationId': !exists(json, 'involvedIntegrationId') ? undefined : json['involvedIntegrationId'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function ActionModelToJSON(value?: ActionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'workspaceId': value.workspaceId,
        'workflowId': value.workflowId,
        'name': value.name,
        'type': value.type,
        'config': ActionConfigurationToJSON(value.config),
        'inputParameters': ((value.inputParameters as Array<any>).map(InputParameterToJSON)),
        'outgoingFlows': ((value.outgoingFlows as Array<any>).map(FlowToJSON)),
        'involvedIntegrationId': value.involvedIntegrationId,
        'version': value.version,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'userName': value.userName,
        'userId': value.userId,
    };
}

