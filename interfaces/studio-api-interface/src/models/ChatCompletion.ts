/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatCompletionMessageParam } from './ChatCompletionMessageParam';
import {
    ChatCompletionMessageParamFromJSON,
    ChatCompletionMessageParamFromJSONTyped,
    ChatCompletionMessageParamToJSON,
} from './ChatCompletionMessageParam';

/**
 * 
 * @export
 * @interface ChatCompletion
 */
export interface ChatCompletion {
    /**
     * 
     * @type {ChatCompletionMessageParam}
     * @memberof ChatCompletion
     */
    systemMessage: ChatCompletionMessageParam;
    /**
     * 
     * @type {Array<ChatCompletionMessageParam>}
     * @memberof ChatCompletion
     */
    userMessages: Array<ChatCompletionMessageParam>;
    /**
     * 
     * @type {string}
     * @memberof ChatCompletion
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof ChatCompletion
     */
    response_format: string;
    /**
     * 
     * @type {string}
     * @memberof ChatCompletion
     */
    user: string;
}

/**
 * Check if a given object implements the ChatCompletion interface.
 */
export function instanceOfChatCompletion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "systemMessage" in value;
    isInstance = isInstance && "userMessages" in value;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "response_format" in value;
    isInstance = isInstance && "user" in value;

    return isInstance;
}

export function ChatCompletionFromJSON(json: any): ChatCompletion {
    return ChatCompletionFromJSONTyped(json, false);
}

export function ChatCompletionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatCompletion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'systemMessage': ChatCompletionMessageParamFromJSON(json['systemMessage']),
        'userMessages': ((json['userMessages'] as Array<any>).map(ChatCompletionMessageParamFromJSON)),
        'model': json['model'],
        'response_format': json['response_format'],
        'user': json['user'],
    };
}

export function ChatCompletionToJSON(value?: ChatCompletion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'systemMessage': ChatCompletionMessageParamToJSON(value.systemMessage),
        'userMessages': ((value.userMessages as Array<any>).map(ChatCompletionMessageParamToJSON)),
        'model': value.model,
        'response_format': value.response_format,
        'user': value.user,
    };
}

