/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EncryptedValue } from './EncryptedValue';
import {
    EncryptedValueFromJSON,
    EncryptedValueFromJSONTyped,
    EncryptedValueToJSON,
} from './EncryptedValue';
import type { IntegrationMailConfig } from './IntegrationMailConfig';
import {
    IntegrationMailConfigFromJSON,
    IntegrationMailConfigFromJSONTyped,
    IntegrationMailConfigToJSON,
} from './IntegrationMailConfig';
import type { IntegrationRestConfig } from './IntegrationRestConfig';
import {
    IntegrationRestConfigFromJSON,
    IntegrationRestConfigFromJSONTyped,
    IntegrationRestConfigToJSON,
} from './IntegrationRestConfig';
import type { IntegrationTelegramConfig } from './IntegrationTelegramConfig';
import {
    IntegrationTelegramConfigFromJSON,
    IntegrationTelegramConfigFromJSONTyped,
    IntegrationTelegramConfigToJSON,
} from './IntegrationTelegramConfig';

/**
 * 
 * @export
 * @interface IntegrationEditDTO
 */
export interface IntegrationEditDTO {
    /**
     * 
     * @type {string}
     * @memberof IntegrationEditDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationEditDTO
     */
    type: IntegrationEditDTOTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof IntegrationEditDTO
     */
    workspaceId: string;
    /**
     * 
     * @type {IntegrationMailConfig}
     * @memberof IntegrationEditDTO
     */
    mail?: IntegrationMailConfig;
    /**
     * 
     * @type {IntegrationRestConfig}
     * @memberof IntegrationEditDTO
     */
    rest?: IntegrationRestConfig;
    /**
     * 
     * @type {IntegrationTelegramConfig}
     * @memberof IntegrationEditDTO
     */
    telegram?: IntegrationTelegramConfig;
    /**
     * 
     * @type {EncryptedValue}
     * @memberof IntegrationEditDTO
     */
    openAi?: EncryptedValue;
}


/**
 * @export
 */
export const IntegrationEditDTOTypeEnum = {
    EMAIL: 'EMAIL',
    REST: 'REST',
    TELEGRAM: 'TELEGRAM',
    OPENAI: 'OPENAI'
} as const;
export type IntegrationEditDTOTypeEnum = typeof IntegrationEditDTOTypeEnum[keyof typeof IntegrationEditDTOTypeEnum];


/**
 * Check if a given object implements the IntegrationEditDTO interface.
 */
export function instanceOfIntegrationEditDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "workspaceId" in value;

    return isInstance;
}

export function IntegrationEditDTOFromJSON(json: any): IntegrationEditDTO {
    return IntegrationEditDTOFromJSONTyped(json, false);
}

export function IntegrationEditDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationEditDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'workspaceId': json['workspaceId'],
        'mail': !exists(json, 'mail') ? undefined : IntegrationMailConfigFromJSON(json['mail']),
        'rest': !exists(json, 'rest') ? undefined : IntegrationRestConfigFromJSON(json['rest']),
        'telegram': !exists(json, 'telegram') ? undefined : IntegrationTelegramConfigFromJSON(json['telegram']),
        'openAi': !exists(json, 'openAi') ? undefined : EncryptedValueFromJSON(json['openAi']),
    };
}

export function IntegrationEditDTOToJSON(value?: IntegrationEditDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'workspaceId': value.workspaceId,
        'mail': IntegrationMailConfigToJSON(value.mail),
        'rest': IntegrationRestConfigToJSON(value.rest),
        'telegram': IntegrationTelegramConfigToJSON(value.telegram),
        'openAi': EncryptedValueToJSON(value.openAi),
    };
}

