/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WorkflowTemplate
 */
export interface WorkflowTemplate {
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowTemplate
     */
    publiclyAvailable: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTemplate
     */
    status: WorkflowTemplateStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowTemplate
     */
    allowCopyIntegrations: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTemplate
     */
    imageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTemplate
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTemplate
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowTemplate
     */
    usageCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof WorkflowTemplate
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Set<string>}
     * @memberof WorkflowTemplate
     */
    tags: Set<string>;
}


/**
 * @export
 */
export const WorkflowTemplateStatusEnum = {
    NOT_PUBLISHED: 'NOT_PUBLISHED',
    PUBLISHED: 'PUBLISHED'
} as const;
export type WorkflowTemplateStatusEnum = typeof WorkflowTemplateStatusEnum[keyof typeof WorkflowTemplateStatusEnum];


/**
 * Check if a given object implements the WorkflowTemplate interface.
 */
export function instanceOfWorkflowTemplate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "publiclyAvailable" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "allowCopyIntegrations" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "tags" in value;

    return isInstance;
}

export function WorkflowTemplateFromJSON(json: any): WorkflowTemplate {
    return WorkflowTemplateFromJSONTyped(json, false);
}

export function WorkflowTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTemplate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'publiclyAvailable': json['publiclyAvailable'],
        'status': json['status'],
        'allowCopyIntegrations': json['allowCopyIntegrations'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'name': json['name'],
        'description': json['description'],
        'usageCount': !exists(json, 'usageCount') ? undefined : json['usageCount'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'tags': json['tags'],
    };
}

export function WorkflowTemplateToJSON(value?: WorkflowTemplate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'publiclyAvailable': value.publiclyAvailable,
        'status': value.status,
        'allowCopyIntegrations': value.allowCopyIntegrations,
        'imageUrl': value.imageUrl,
        'name': value.name,
        'description': value.description,
        'usageCount': value.usageCount,
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'tags': Array.from(value.tags as Set<any>),
    };
}

