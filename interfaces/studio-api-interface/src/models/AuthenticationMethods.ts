/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BasicAuth } from './BasicAuth';
import {
    BasicAuthFromJSON,
    BasicAuthFromJSONTyped,
    BasicAuthToJSON,
} from './BasicAuth';
import type { EncryptedValue } from './EncryptedValue';
import {
    EncryptedValueFromJSON,
    EncryptedValueFromJSONTyped,
    EncryptedValueToJSON,
} from './EncryptedValue';
import type { OAuth1Auth } from './OAuth1Auth';
import {
    OAuth1AuthFromJSON,
    OAuth1AuthFromJSONTyped,
    OAuth1AuthToJSON,
} from './OAuth1Auth';
import type { OAuth2Auth } from './OAuth2Auth';
import {
    OAuth2AuthFromJSON,
    OAuth2AuthFromJSONTyped,
    OAuth2AuthToJSON,
} from './OAuth2Auth';

/**
 * 
 * @export
 * @interface AuthenticationMethods
 */
export interface AuthenticationMethods {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationMethods
     */
    type: AuthenticationMethodsTypeEnum;
    /**
     * 
     * @type {EncryptedValue}
     * @memberof AuthenticationMethods
     */
    bearerToken?: EncryptedValue;
    /**
     * 
     * @type {BasicAuth}
     * @memberof AuthenticationMethods
     */
    basicAuth?: BasicAuth;
    /**
     * 
     * @type {OAuth1Auth}
     * @memberof AuthenticationMethods
     */
    oauth1?: OAuth1Auth;
    /**
     * 
     * @type {OAuth2Auth}
     * @memberof AuthenticationMethods
     */
    oauth2?: OAuth2Auth;
}


/**
 * @export
 */
export const AuthenticationMethodsTypeEnum = {
    NONE: 'NONE',
    BEARER: 'BEARER',
    BASIC: 'BASIC',
    OAUTH_1_0: 'OAUTH_1_0',
    OAUTH_2_0: 'OAUTH_2_0'
} as const;
export type AuthenticationMethodsTypeEnum = typeof AuthenticationMethodsTypeEnum[keyof typeof AuthenticationMethodsTypeEnum];


/**
 * Check if a given object implements the AuthenticationMethods interface.
 */
export function instanceOfAuthenticationMethods(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function AuthenticationMethodsFromJSON(json: any): AuthenticationMethods {
    return AuthenticationMethodsFromJSONTyped(json, false);
}

export function AuthenticationMethodsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationMethods {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'bearerToken': !exists(json, 'bearerToken') ? undefined : EncryptedValueFromJSON(json['bearerToken']),
        'basicAuth': !exists(json, 'basicAuth') ? undefined : BasicAuthFromJSON(json['basicAuth']),
        'oauth1': !exists(json, 'oauth1') ? undefined : OAuth1AuthFromJSON(json['oauth1']),
        'oauth2': !exists(json, 'oauth2') ? undefined : OAuth2AuthFromJSON(json['oauth2']),
    };
}

export function AuthenticationMethodsToJSON(value?: AuthenticationMethods | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'bearerToken': EncryptedValueToJSON(value.bearerToken),
        'basicAuth': BasicAuthToJSON(value.basicAuth),
        'oauth1': OAuth1AuthToJSON(value.oauth1),
        'oauth2': OAuth2AuthToJSON(value.oauth2),
    };
}

