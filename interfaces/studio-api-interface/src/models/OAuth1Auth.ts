/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EncryptedValue } from './EncryptedValue';
import {
    EncryptedValueFromJSON,
    EncryptedValueFromJSONTyped,
    EncryptedValueToJSON,
} from './EncryptedValue';

/**
 * 
 * @export
 * @interface OAuth1Auth
 */
export interface OAuth1Auth {
    /**
     * 
     * @type {string}
     * @memberof OAuth1Auth
     */
    consumerKey: string;
    /**
     * 
     * @type {EncryptedValue}
     * @memberof OAuth1Auth
     */
    consumerSecret?: EncryptedValue;
    /**
     * 
     * @type {EncryptedValue}
     * @memberof OAuth1Auth
     */
    accessToken?: EncryptedValue;
    /**
     * 
     * @type {EncryptedValue}
     * @memberof OAuth1Auth
     */
    tokenSecret?: EncryptedValue;
    /**
     * 
     * @type {string}
     * @memberof OAuth1Auth
     */
    signatureMethod: string;
}

/**
 * Check if a given object implements the OAuth1Auth interface.
 */
export function instanceOfOAuth1Auth(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "consumerKey" in value;
    isInstance = isInstance && "signatureMethod" in value;

    return isInstance;
}

export function OAuth1AuthFromJSON(json: any): OAuth1Auth {
    return OAuth1AuthFromJSONTyped(json, false);
}

export function OAuth1AuthFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuth1Auth {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'consumerKey': json['consumerKey'],
        'consumerSecret': !exists(json, 'consumerSecret') ? undefined : EncryptedValueFromJSON(json['consumerSecret']),
        'accessToken': !exists(json, 'accessToken') ? undefined : EncryptedValueFromJSON(json['accessToken']),
        'tokenSecret': !exists(json, 'tokenSecret') ? undefined : EncryptedValueFromJSON(json['tokenSecret']),
        'signatureMethod': json['signatureMethod'],
    };
}

export function OAuth1AuthToJSON(value?: OAuth1Auth | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'consumerKey': value.consumerKey,
        'consumerSecret': EncryptedValueToJSON(value.consumerSecret),
        'accessToken': EncryptedValueToJSON(value.accessToken),
        'tokenSecret': EncryptedValueToJSON(value.tokenSecret),
        'signatureMethod': value.signatureMethod,
    };
}

