/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthenticationMethods } from './AuthenticationMethods';
import {
    AuthenticationMethodsFromJSON,
    AuthenticationMethodsFromJSONTyped,
    AuthenticationMethodsToJSON,
} from './AuthenticationMethods';
import type { KeyValueStringPair } from './KeyValueStringPair';
import {
    KeyValueStringPairFromJSON,
    KeyValueStringPairFromJSONTyped,
    KeyValueStringPairToJSON,
} from './KeyValueStringPair';

/**
 * 
 * @export
 * @interface IntegrationRestConfig
 */
export interface IntegrationRestConfig {
    /**
     * 
     * @type {string}
     * @memberof IntegrationRestConfig
     */
    baseUrl: string;
    /**
     * 
     * @type {AuthenticationMethods}
     * @memberof IntegrationRestConfig
     */
    defaultAuthentication: AuthenticationMethods;
    /**
     * 
     * @type {Array<KeyValueStringPair>}
     * @memberof IntegrationRestConfig
     */
    defaultHeaders?: Array<KeyValueStringPair>;
}

/**
 * Check if a given object implements the IntegrationRestConfig interface.
 */
export function instanceOfIntegrationRestConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "baseUrl" in value;
    isInstance = isInstance && "defaultAuthentication" in value;

    return isInstance;
}

export function IntegrationRestConfigFromJSON(json: any): IntegrationRestConfig {
    return IntegrationRestConfigFromJSONTyped(json, false);
}

export function IntegrationRestConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationRestConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'baseUrl': json['baseUrl'],
        'defaultAuthentication': AuthenticationMethodsFromJSON(json['defaultAuthentication']),
        'defaultHeaders': !exists(json, 'defaultHeaders') ? undefined : ((json['defaultHeaders'] as Array<any>).map(KeyValueStringPairFromJSON)),
    };
}

export function IntegrationRestConfigToJSON(value?: IntegrationRestConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'baseUrl': value.baseUrl,
        'defaultAuthentication': AuthenticationMethodsToJSON(value.defaultAuthentication),
        'defaultHeaders': value.defaultHeaders === undefined ? undefined : ((value.defaultHeaders as Array<any>).map(KeyValueStringPairToJSON)),
    };
}

