/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProjectModel
 */
export interface ProjectModel {
    /**
     * 
     * @type {string}
     * @memberof ProjectModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectModel
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectModel
     */
    workflows: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProjectModel
     */
    workspaceId: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectModel
     */
    version?: number;
    /**
     * 
     * @type {Date}
     * @memberof ProjectModel
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProjectModel
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ProjectModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectModel
     */
    userId?: string;
}

/**
 * Check if a given object implements the ProjectModel interface.
 */
export function instanceOfProjectModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "workflows" in value;
    isInstance = isInstance && "workspaceId" in value;

    return isInstance;
}

export function ProjectModelFromJSON(json: any): ProjectModel {
    return ProjectModelFromJSONTyped(json, false);
}

export function ProjectModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'workflows': json['workflows'],
        'workspaceId': json['workspaceId'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function ProjectModelToJSON(value?: ProjectModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'workflows': value.workflows,
        'workspaceId': value.workspaceId,
        'version': value.version,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'userName': value.userName,
        'userId': value.userId,
    };
}

