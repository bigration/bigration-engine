/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InputParameter
 */
export interface InputParameter {
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    source: InputParameterSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    sourceActionId?: string;
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    parameterName: string;
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    defaultValue?: string;
}


/**
 * @export
 */
export const InputParameterSourceEnum = {
    TRIGGER: 'TRIGGER',
    ACTION: 'ACTION',
    GLOBAL_VARIABLE: 'GLOBAL_VARIABLE'
} as const;
export type InputParameterSourceEnum = typeof InputParameterSourceEnum[keyof typeof InputParameterSourceEnum];


/**
 * Check if a given object implements the InputParameter interface.
 */
export function instanceOfInputParameter(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "source" in value;
    isInstance = isInstance && "parameterName" in value;

    return isInstance;
}

export function InputParameterFromJSON(json: any): InputParameter {
    return InputParameterFromJSONTyped(json, false);
}

export function InputParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): InputParameter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'source': json['source'],
        'sourceActionId': !exists(json, 'sourceActionId') ? undefined : json['sourceActionId'],
        'parameterName': json['parameterName'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
    };
}

export function InputParameterToJSON(value?: InputParameter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'source': value.source,
        'sourceActionId': value.sourceActionId,
        'parameterName': value.parameterName,
        'path': value.path,
        'defaultValue': value.defaultValue,
    };
}

