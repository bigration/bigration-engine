/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountMember } from './AccountMember';
import {
    AccountMemberFromJSON,
    AccountMemberFromJSONTyped,
    AccountMemberToJSON,
} from './AccountMember';

/**
 * 
 * @export
 * @interface AccountModel
 */
export interface AccountModel {
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountModel
     */
    workspaces: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    ownerId: string;
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    stripeCustomerId: string;
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    stripeSubscriptionId?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    stripePlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    stripeProductId?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    plan: AccountModelPlanEnum;
    /**
     * 
     * @type {Array<AccountMember>}
     * @memberof AccountModel
     */
    members: Array<AccountMember>;
    /**
     * 
     * @type {number}
     * @memberof AccountModel
     */
    version?: number;
    /**
     * 
     * @type {Date}
     * @memberof AccountModel
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AccountModel
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountModel
     */
    userId?: string;
}


/**
 * @export
 */
export const AccountModelPlanEnum = {
    FREE: 'FREE',
    BASIC: 'BASIC',
    PRO: 'PRO',
    BUSINESS: 'BUSINESS',
    ENTERPRISE: 'ENTERPRISE'
} as const;
export type AccountModelPlanEnum = typeof AccountModelPlanEnum[keyof typeof AccountModelPlanEnum];


/**
 * Check if a given object implements the AccountModel interface.
 */
export function instanceOfAccountModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "workspaces" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "stripeCustomerId" in value;
    isInstance = isInstance && "plan" in value;
    isInstance = isInstance && "members" in value;

    return isInstance;
}

export function AccountModelFromJSON(json: any): AccountModel {
    return AccountModelFromJSONTyped(json, false);
}

export function AccountModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'workspaces': json['workspaces'],
        'ownerId': json['ownerId'],
        'stripeCustomerId': json['stripeCustomerId'],
        'stripeSubscriptionId': !exists(json, 'stripeSubscriptionId') ? undefined : json['stripeSubscriptionId'],
        'stripePlanId': !exists(json, 'stripePlanId') ? undefined : json['stripePlanId'],
        'stripeProductId': !exists(json, 'stripeProductId') ? undefined : json['stripeProductId'],
        'plan': json['plan'],
        'members': ((json['members'] as Array<any>).map(AccountMemberFromJSON)),
        'version': !exists(json, 'version') ? undefined : json['version'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
    };
}

export function AccountModelToJSON(value?: AccountModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'workspaces': value.workspaces,
        'ownerId': value.ownerId,
        'stripeCustomerId': value.stripeCustomerId,
        'stripeSubscriptionId': value.stripeSubscriptionId,
        'stripePlanId': value.stripePlanId,
        'stripeProductId': value.stripeProductId,
        'plan': value.plan,
        'members': ((value.members as Array<any>).map(AccountMemberToJSON)),
        'version': value.version,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'userName': value.userName,
        'userId': value.userId,
    };
}

