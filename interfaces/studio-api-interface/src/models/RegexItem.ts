/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegexItem
 */
export interface RegexItem {
    /**
     * 
     * @type {string}
     * @memberof RegexItem
     */
    pattern: string;
    /**
     * 
     * @type {string}
     * @memberof RegexItem
     */
    flags: string;
    /**
     * 
     * @type {string}
     * @memberof RegexItem
     */
    outcome: RegexItemOutcomeEnum;
    /**
     * 
     * @type {string}
     * @memberof RegexItem
     */
    replacement?: string;
}


/**
 * @export
 */
export const RegexItemOutcomeEnum = {
    MATCH: 'MATCH',
    REPLACE: 'REPLACE',
    REMOVE: 'REMOVE',
    SPLIT: 'SPLIT',
    TEST: 'TEST'
} as const;
export type RegexItemOutcomeEnum = typeof RegexItemOutcomeEnum[keyof typeof RegexItemOutcomeEnum];


/**
 * Check if a given object implements the RegexItem interface.
 */
export function instanceOfRegexItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pattern" in value;
    isInstance = isInstance && "flags" in value;
    isInstance = isInstance && "outcome" in value;

    return isInstance;
}

export function RegexItemFromJSON(json: any): RegexItem {
    return RegexItemFromJSONTyped(json, false);
}

export function RegexItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegexItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pattern': json['pattern'],
        'flags': json['flags'],
        'outcome': json['outcome'],
        'replacement': !exists(json, 'replacement') ? undefined : json['replacement'],
    };
}

export function RegexItemToJSON(value?: RegexItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pattern': value.pattern,
        'flags': value.flags,
        'outcome': value.outcome,
        'replacement': value.replacement,
    };
}

