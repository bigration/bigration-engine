/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WorkflowStatisticsDataDTO } from './WorkflowStatisticsDataDTO';
import {
    WorkflowStatisticsDataDTOFromJSON,
    WorkflowStatisticsDataDTOFromJSONTyped,
    WorkflowStatisticsDataDTOToJSON,
} from './WorkflowStatisticsDataDTO';

/**
 * 
 * @export
 * @interface ProjectStatisticsDataDTO
 */
export interface ProjectStatisticsDataDTO {
    /**
     * 
     * @type {string}
     * @memberof ProjectStatisticsDataDTO
     */
    projectId?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectStatisticsDataDTO
     */
    projectName?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectStatisticsDataDTO
     */
    periodDate?: string;
    /**
     * 
     * @type {Array<WorkflowStatisticsDataDTO>}
     * @memberof ProjectStatisticsDataDTO
     */
    workflows: Array<WorkflowStatisticsDataDTO>;
    /**
     * 
     * @type {number}
     * @memberof ProjectStatisticsDataDTO
     */
    running: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectStatisticsDataDTO
     */
    failed: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectStatisticsDataDTO
     */
    finished: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectStatisticsDataDTO
     */
    executedInstances: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectStatisticsDataDTO
     */
    executedActions: number;
}

/**
 * Check if a given object implements the ProjectStatisticsDataDTO interface.
 */
export function instanceOfProjectStatisticsDataDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "workflows" in value;
    isInstance = isInstance && "running" in value;
    isInstance = isInstance && "failed" in value;
    isInstance = isInstance && "finished" in value;
    isInstance = isInstance && "executedInstances" in value;
    isInstance = isInstance && "executedActions" in value;

    return isInstance;
}

export function ProjectStatisticsDataDTOFromJSON(json: any): ProjectStatisticsDataDTO {
    return ProjectStatisticsDataDTOFromJSONTyped(json, false);
}

export function ProjectStatisticsDataDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectStatisticsDataDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'projectId': !exists(json, 'projectId') ? undefined : json['projectId'],
        'projectName': !exists(json, 'projectName') ? undefined : json['projectName'],
        'periodDate': !exists(json, 'periodDate') ? undefined : json['periodDate'],
        'workflows': ((json['workflows'] as Array<any>).map(WorkflowStatisticsDataDTOFromJSON)),
        'running': json['running'],
        'failed': json['failed'],
        'finished': json['finished'],
        'executedInstances': json['executedInstances'],
        'executedActions': json['executedActions'],
    };
}

export function ProjectStatisticsDataDTOToJSON(value?: ProjectStatisticsDataDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'projectId': value.projectId,
        'projectName': value.projectName,
        'periodDate': value.periodDate,
        'workflows': ((value.workflows as Array<any>).map(WorkflowStatisticsDataDTOToJSON)),
        'running': value.running,
        'failed': value.failed,
        'finished': value.finished,
        'executedInstances': value.executedInstances,
        'executedActions': value.executedActions,
    };
}

