/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InputParameter } from './InputParameter';
import {
    InputParameterFromJSON,
    InputParameterFromJSONTyped,
    InputParameterToJSON,
} from './InputParameter';

/**
 * 
 * @export
 * @interface Manipulator
 */
export interface Manipulator {
    /**
     * 
     * @type {string}
     * @memberof Manipulator
     */
    type: ManipulatorTypeEnum;
    /**
     * 
     * @type {InputParameter}
     * @memberof Manipulator
     */
    leftInputParam: InputParameter;
    /**
     * 
     * @type {InputParameter}
     * @memberof Manipulator
     */
    rightInputParam?: InputParameter;
    /**
     * 
     * @type {string}
     * @memberof Manipulator
     */
    expression: ManipulatorExpressionEnum;
}


/**
 * @export
 */
export const ManipulatorTypeEnum = {
    INSERT: 'INSERT',
    UPDATE: 'UPDATE',
    DELETE: 'DELETE'
} as const;
export type ManipulatorTypeEnum = typeof ManipulatorTypeEnum[keyof typeof ManipulatorTypeEnum];

/**
 * @export
 */
export const ManipulatorExpressionEnum = {
    COUNT: 'COUNT',
    ADD: 'ADD',
    SUBTRACT: 'SUBTRACT',
    MULTIPLY: 'MULTIPLY',
    DIVIDE: 'DIVIDE',
    MODULUS: 'MODULUS',
    INCREMENT: 'INCREMENT',
    DECREMENT: 'DECREMENT'
} as const;
export type ManipulatorExpressionEnum = typeof ManipulatorExpressionEnum[keyof typeof ManipulatorExpressionEnum];


/**
 * Check if a given object implements the Manipulator interface.
 */
export function instanceOfManipulator(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "leftInputParam" in value;
    isInstance = isInstance && "expression" in value;

    return isInstance;
}

export function ManipulatorFromJSON(json: any): Manipulator {
    return ManipulatorFromJSONTyped(json, false);
}

export function ManipulatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Manipulator {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'leftInputParam': InputParameterFromJSON(json['leftInputParam']),
        'rightInputParam': !exists(json, 'rightInputParam') ? undefined : InputParameterFromJSON(json['rightInputParam']),
        'expression': json['expression'],
    };
}

export function ManipulatorToJSON(value?: Manipulator | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'leftInputParam': InputParameterToJSON(value.leftInputParam),
        'rightInputParam': InputParameterToJSON(value.rightInputParam),
        'expression': value.expression,
    };
}

