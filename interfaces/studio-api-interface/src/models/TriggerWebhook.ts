/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IntegrationWebhooks } from './IntegrationWebhooks';
import {
    IntegrationWebhooksFromJSON,
    IntegrationWebhooksFromJSONTyped,
    IntegrationWebhooksToJSON,
} from './IntegrationWebhooks';
import type { WebhookResponse } from './WebhookResponse';
import {
    WebhookResponseFromJSON,
    WebhookResponseFromJSONTyped,
    WebhookResponseToJSON,
} from './WebhookResponse';

/**
 * 
 * @export
 * @interface TriggerWebhook
 */
export interface TriggerWebhook {
    /**
     * 
     * @type {string}
     * @memberof TriggerWebhook
     */
    urlPath: string;
    /**
     * 
     * @type {string}
     * @memberof TriggerWebhook
     */
    webhookType?: TriggerWebhookWebhookTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof TriggerWebhook
     */
    allowedMethods: Array<TriggerWebhookAllowedMethodsEnum>;
    /**
     * 
     * @type {WebhookResponse}
     * @memberof TriggerWebhook
     */
    response?: WebhookResponse;
    /**
     * 
     * @type {IntegrationWebhooks}
     * @memberof TriggerWebhook
     */
    integrationWebhooks: IntegrationWebhooks;
}


/**
 * @export
 */
export const TriggerWebhookWebhookTypeEnum = {
    CUSTOM: 'CUSTOM',
    WOOCOMMERCE: 'WOOCOMMERCE',
    TELEGRAM: 'TELEGRAM'
} as const;
export type TriggerWebhookWebhookTypeEnum = typeof TriggerWebhookWebhookTypeEnum[keyof typeof TriggerWebhookWebhookTypeEnum];

/**
 * @export
 */
export const TriggerWebhookAllowedMethodsEnum = {
    GET: 'GET',
    DELETE: 'DELETE',
    HEAD: 'HEAD',
    OPTIONS: 'OPTIONS',
    POST: 'POST',
    PUT: 'PUT',
    PATCH: 'PATCH',
    PURGE: 'PURGE',
    LINK: 'LINK',
    UNLINK: 'UNLINK'
} as const;
export type TriggerWebhookAllowedMethodsEnum = typeof TriggerWebhookAllowedMethodsEnum[keyof typeof TriggerWebhookAllowedMethodsEnum];


/**
 * Check if a given object implements the TriggerWebhook interface.
 */
export function instanceOfTriggerWebhook(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "urlPath" in value;
    isInstance = isInstance && "allowedMethods" in value;
    isInstance = isInstance && "integrationWebhooks" in value;

    return isInstance;
}

export function TriggerWebhookFromJSON(json: any): TriggerWebhook {
    return TriggerWebhookFromJSONTyped(json, false);
}

export function TriggerWebhookFromJSONTyped(json: any, ignoreDiscriminator: boolean): TriggerWebhook {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'urlPath': json['urlPath'],
        'webhookType': !exists(json, 'webhookType') ? undefined : json['webhookType'],
        'allowedMethods': json['allowedMethods'],
        'response': !exists(json, 'response') ? undefined : WebhookResponseFromJSON(json['response']),
        'integrationWebhooks': IntegrationWebhooksFromJSON(json['integrationWebhooks']),
    };
}

export function TriggerWebhookToJSON(value?: TriggerWebhook | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'urlPath': value.urlPath,
        'webhookType': value.webhookType,
        'allowedMethods': value.allowedMethods,
        'response': WebhookResponseToJSON(value.response),
        'integrationWebhooks': IntegrationWebhooksToJSON(value.integrationWebhooks),
    };
}

