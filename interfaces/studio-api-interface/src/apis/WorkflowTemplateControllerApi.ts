/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagingResponseDTOWorkflowModel,
  SearchRequestDTO,
  WorkflowModel,
  WorkflowTemplate,
  WorkflowTreeDTO,
} from '../models';
import {
    PagingResponseDTOWorkflowModelFromJSON,
    PagingResponseDTOWorkflowModelToJSON,
    SearchRequestDTOFromJSON,
    SearchRequestDTOToJSON,
    WorkflowModelFromJSON,
    WorkflowModelToJSON,
    WorkflowTemplateFromJSON,
    WorkflowTemplateToJSON,
    WorkflowTreeDTOFromJSON,
    WorkflowTreeDTOToJSON,
} from '../models';

export interface ModifyWorkflowTemplateRequest {
    workflowId: string;
    workflowTemplate: WorkflowTemplate;
}

export interface PreviewTemplateWorkflowTreeRequest {
    workflowId: string;
    onlyPrivate?: boolean;
}

export interface SearchTemplatesRequest {
    searchRequestDTO: SearchRequestDTO;
    onlyPrivate?: boolean;
}

/**
 * WorkflowTemplateControllerApi - interface
 * 
 * @export
 * @interface WorkflowTemplateControllerApiInterface
 */
export interface WorkflowTemplateControllerApiInterface {
    /**
     * 
     * @param {string} workflowId 
     * @param {WorkflowTemplate} workflowTemplate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateControllerApiInterface
     */
    modifyWorkflowTemplateRaw(requestParameters: ModifyWorkflowTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowModel>>;

    /**
     */
    modifyWorkflowTemplate(requestParameters: ModifyWorkflowTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowModel>;

    /**
     * 
     * @param {string} workflowId 
     * @param {boolean} [onlyPrivate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateControllerApiInterface
     */
    previewTemplateWorkflowTreeRaw(requestParameters: PreviewTemplateWorkflowTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTreeDTO>>;

    /**
     */
    previewTemplateWorkflowTree(requestParameters: PreviewTemplateWorkflowTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTreeDTO>;

    /**
     * 
     * @param {SearchRequestDTO} searchRequestDTO 
     * @param {boolean} [onlyPrivate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowTemplateControllerApiInterface
     */
    searchTemplatesRaw(requestParameters: SearchTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOWorkflowModel>>;

    /**
     */
    searchTemplates(requestParameters: SearchTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOWorkflowModel>;

}

/**
 * 
 */
export class WorkflowTemplateControllerApi extends runtime.BaseAPI implements WorkflowTemplateControllerApiInterface {

    /**
     */
    async modifyWorkflowTemplateRaw(requestParameters: ModifyWorkflowTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowModel>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling modifyWorkflowTemplate.');
        }

        if (requestParameters.workflowTemplate === null || requestParameters.workflowTemplate === undefined) {
            throw new runtime.RequiredError('workflowTemplate','Required parameter requestParameters.workflowTemplate was null or undefined when calling modifyWorkflowTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflow-template/modify-workflow-template/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateToJSON(requestParameters.workflowTemplate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowModelFromJSON(jsonValue));
    }

    /**
     */
    async modifyWorkflowTemplate(requestParameters: ModifyWorkflowTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowModel> {
        const response = await this.modifyWorkflowTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async previewTemplateWorkflowTreeRaw(requestParameters: PreviewTemplateWorkflowTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTreeDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling previewTemplateWorkflowTree.');
        }

        const queryParameters: any = {};

        if (requestParameters.onlyPrivate !== undefined) {
            queryParameters['onlyPrivate'] = requestParameters.onlyPrivate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflow-template/preview-workflow-tree/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTreeDTOFromJSON(jsonValue));
    }

    /**
     */
    async previewTemplateWorkflowTree(requestParameters: PreviewTemplateWorkflowTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTreeDTO> {
        const response = await this.previewTemplateWorkflowTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchTemplatesRaw(requestParameters: SearchTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOWorkflowModel>> {
        if (requestParameters.searchRequestDTO === null || requestParameters.searchRequestDTO === undefined) {
            throw new runtime.RequiredError('searchRequestDTO','Required parameter requestParameters.searchRequestDTO was null or undefined when calling searchTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.onlyPrivate !== undefined) {
            queryParameters['onlyPrivate'] = requestParameters.onlyPrivate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflow-template/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDTOToJSON(requestParameters.searchRequestDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagingResponseDTOWorkflowModelFromJSON(jsonValue));
    }

    /**
     */
    async searchTemplates(requestParameters: SearchTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOWorkflowModel> {
        const response = await this.searchTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
