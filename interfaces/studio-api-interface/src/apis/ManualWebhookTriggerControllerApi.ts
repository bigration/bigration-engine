/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InstanceModel,
} from '../models';
import {
    InstanceModelFromJSON,
    InstanceModelToJSON,
} from '../models';

export interface RerunFromStartRequest {
    instanceId: string;
    workflowIdOrName: string;
    requestBody: { [key: string]: object | undefined; };
}

export interface TriggerManuallyRequest {
    workflowIdOrName: string;
    requestBody: { [key: string]: object | undefined; };
}

/**
 * ManualWebhookTriggerControllerApi - interface
 * 
 * @export
 * @interface ManualWebhookTriggerControllerApiInterface
 */
export interface ManualWebhookTriggerControllerApiInterface {
    /**
     * 
     * @param {string} instanceId 
     * @param {string} workflowIdOrName 
     * @param {{ [key: string]: object | undefined; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManualWebhookTriggerControllerApiInterface
     */
    rerunFromStartRaw(requestParameters: RerunFromStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceModel>>;

    /**
     */
    rerunFromStart(requestParameters: RerunFromStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceModel>;

    /**
     * 
     * @param {string} workflowIdOrName 
     * @param {{ [key: string]: object | undefined; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManualWebhookTriggerControllerApiInterface
     */
    triggerManuallyRaw(requestParameters: TriggerManuallyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceModel>>;

    /**
     */
    triggerManually(requestParameters: TriggerManuallyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceModel>;

}

/**
 * 
 */
export class ManualWebhookTriggerControllerApi extends runtime.BaseAPI implements ManualWebhookTriggerControllerApiInterface {

    /**
     */
    async rerunFromStartRaw(requestParameters: RerunFromStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceModel>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling rerunFromStart.');
        }

        if (requestParameters.workflowIdOrName === null || requestParameters.workflowIdOrName === undefined) {
            throw new runtime.RequiredError('workflowIdOrName','Required parameter requestParameters.workflowIdOrName was null or undefined when calling rerunFromStart.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling rerunFromStart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manual-trigger/rerun-instance/{instanceId}/workflow/{workflowIdOrName}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))).replace(`{${"workflowIdOrName"}}`, encodeURIComponent(String(requestParameters.workflowIdOrName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceModelFromJSON(jsonValue));
    }

    /**
     */
    async rerunFromStart(requestParameters: RerunFromStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceModel> {
        const response = await this.rerunFromStartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async triggerManuallyRaw(requestParameters: TriggerManuallyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceModel>> {
        if (requestParameters.workflowIdOrName === null || requestParameters.workflowIdOrName === undefined) {
            throw new runtime.RequiredError('workflowIdOrName','Required parameter requestParameters.workflowIdOrName was null or undefined when calling triggerManually.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling triggerManually.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manual-trigger/trigger-workflow/{workflowIdOrName}`.replace(`{${"workflowIdOrName"}}`, encodeURIComponent(String(requestParameters.workflowIdOrName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceModelFromJSON(jsonValue));
    }

    /**
     */
    async triggerManually(requestParameters: TriggerManuallyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceModel> {
        const response = await this.triggerManuallyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
