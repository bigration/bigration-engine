/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GlobalVariableDTO,
  PagingResponseDTOWorkflowModel,
  SearchRequestDTO,
  WorkflowBaseDTO,
  WorkflowEditDTO,
  WorkflowModel,
  WorkflowOutputParamsDTO,
  WorkflowTrigger,
} from '../models';
import {
    GlobalVariableDTOFromJSON,
    GlobalVariableDTOToJSON,
    PagingResponseDTOWorkflowModelFromJSON,
    PagingResponseDTOWorkflowModelToJSON,
    SearchRequestDTOFromJSON,
    SearchRequestDTOToJSON,
    WorkflowBaseDTOFromJSON,
    WorkflowBaseDTOToJSON,
    WorkflowEditDTOFromJSON,
    WorkflowEditDTOToJSON,
    WorkflowModelFromJSON,
    WorkflowModelToJSON,
    WorkflowOutputParamsDTOFromJSON,
    WorkflowOutputParamsDTOToJSON,
    WorkflowTriggerFromJSON,
    WorkflowTriggerToJSON,
} from '../models';

export interface CreateWorkflowRequest {
    workflowEditDTO: WorkflowEditDTO;
}

export interface DeleteWorkflowRequest {
    workflowId: string;
}

export interface GetSingleWorkflowRequest {
    workflowId: string;
}

export interface GetWorkflowOutputParametersRequest {
    workflowId: string;
}

export interface SearchWorkflowsRequest {
    projectId: string;
    searchRequestDTO: SearchRequestDTO;
}

export interface UpdateGlobalVariablesInWorkflowRequest {
    workflowId: string;
    globalVariableDTO: Array<GlobalVariableDTO>;
}

export interface UpdateWorkflowRequest {
    workflowId: string;
    workflowStatus: UpdateWorkflowWorkflowStatusEnum;
    workflowEditDTO: WorkflowEditDTO;
}

export interface UpdateWorkflowTriggerRequest {
    workflowId: string;
    workflowTrigger: WorkflowTrigger;
}

/**
 * WorkflowControllerApi - interface
 * 
 * @export
 * @interface WorkflowControllerApiInterface
 */
export interface WorkflowControllerApiInterface {
    /**
     * 
     * @param {WorkflowEditDTO} workflowEditDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowControllerApiInterface
     */
    createWorkflowRaw(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowModel>>;

    /**
     */
    createWorkflow(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowModel>;

    /**
     * 
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowControllerApiInterface
     */
    deleteWorkflowRaw(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteWorkflow(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowControllerApiInterface
     */
    getSingleWorkflowRaw(requestParameters: GetSingleWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowBaseDTO>>;

    /**
     */
    getSingleWorkflow(requestParameters: GetSingleWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowBaseDTO>;

    /**
     * 
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowControllerApiInterface
     */
    getWorkflowOutputParametersRaw(requestParameters: GetWorkflowOutputParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowOutputParamsDTO>>;

    /**
     */
    getWorkflowOutputParameters(requestParameters: GetWorkflowOutputParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowOutputParamsDTO>;

    /**
     * 
     * @param {string} projectId 
     * @param {SearchRequestDTO} searchRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowControllerApiInterface
     */
    searchWorkflowsRaw(requestParameters: SearchWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOWorkflowModel>>;

    /**
     */
    searchWorkflows(requestParameters: SearchWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOWorkflowModel>;

    /**
     * 
     * @param {string} workflowId 
     * @param {Array<GlobalVariableDTO>} globalVariableDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowControllerApiInterface
     */
    updateGlobalVariablesInWorkflowRaw(requestParameters: UpdateGlobalVariablesInWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowModel>>;

    /**
     */
    updateGlobalVariablesInWorkflow(requestParameters: UpdateGlobalVariablesInWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowModel>;

    /**
     * 
     * @param {string} workflowId 
     * @param {'ACTIVE' | 'INACTIVE'} workflowStatus 
     * @param {WorkflowEditDTO} workflowEditDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowControllerApiInterface
     */
    updateWorkflowRaw(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowModel>>;

    /**
     */
    updateWorkflow(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowModel>;

    /**
     * 
     * @param {string} workflowId 
     * @param {WorkflowTrigger} workflowTrigger 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowControllerApiInterface
     */
    updateWorkflowTriggerRaw(requestParameters: UpdateWorkflowTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    updateWorkflowTrigger(requestParameters: UpdateWorkflowTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class WorkflowControllerApi extends runtime.BaseAPI implements WorkflowControllerApiInterface {

    /**
     */
    async createWorkflowRaw(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowModel>> {
        if (requestParameters.workflowEditDTO === null || requestParameters.workflowEditDTO === undefined) {
            throw new runtime.RequiredError('workflowEditDTO','Required parameter requestParameters.workflowEditDTO was null or undefined when calling createWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflow/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowEditDTOToJSON(requestParameters.workflowEditDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowModelFromJSON(jsonValue));
    }

    /**
     */
    async createWorkflow(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowModel> {
        const response = await this.createWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteWorkflowRaw(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling deleteWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflow/delete/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWorkflow(requestParameters: DeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getSingleWorkflowRaw(requestParameters: GetSingleWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowBaseDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getSingleWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflow/single/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowBaseDTOFromJSON(jsonValue));
    }

    /**
     */
    async getSingleWorkflow(requestParameters: GetSingleWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowBaseDTO> {
        const response = await this.getSingleWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkflowOutputParametersRaw(requestParameters: GetWorkflowOutputParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowOutputParamsDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowOutputParameters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflow/output-params/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowOutputParamsDTOFromJSON(jsonValue));
    }

    /**
     */
    async getWorkflowOutputParameters(requestParameters: GetWorkflowOutputParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowOutputParamsDTO> {
        const response = await this.getWorkflowOutputParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchWorkflowsRaw(requestParameters: SearchWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOWorkflowModel>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling searchWorkflows.');
        }

        if (requestParameters.searchRequestDTO === null || requestParameters.searchRequestDTO === undefined) {
            throw new runtime.RequiredError('searchRequestDTO','Required parameter requestParameters.searchRequestDTO was null or undefined when calling searchWorkflows.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflow/search/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDTOToJSON(requestParameters.searchRequestDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagingResponseDTOWorkflowModelFromJSON(jsonValue));
    }

    /**
     */
    async searchWorkflows(requestParameters: SearchWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOWorkflowModel> {
        const response = await this.searchWorkflowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGlobalVariablesInWorkflowRaw(requestParameters: UpdateGlobalVariablesInWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowModel>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling updateGlobalVariablesInWorkflow.');
        }

        if (requestParameters.globalVariableDTO === null || requestParameters.globalVariableDTO === undefined) {
            throw new runtime.RequiredError('globalVariableDTO','Required parameter requestParameters.globalVariableDTO was null or undefined when calling updateGlobalVariablesInWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflow/global-variables/update/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.globalVariableDTO.map(GlobalVariableDTOToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowModelFromJSON(jsonValue));
    }

    /**
     */
    async updateGlobalVariablesInWorkflow(requestParameters: UpdateGlobalVariablesInWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowModel> {
        const response = await this.updateGlobalVariablesInWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWorkflowRaw(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowModel>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling updateWorkflow.');
        }

        if (requestParameters.workflowStatus === null || requestParameters.workflowStatus === undefined) {
            throw new runtime.RequiredError('workflowStatus','Required parameter requestParameters.workflowStatus was null or undefined when calling updateWorkflow.');
        }

        if (requestParameters.workflowEditDTO === null || requestParameters.workflowEditDTO === undefined) {
            throw new runtime.RequiredError('workflowEditDTO','Required parameter requestParameters.workflowEditDTO was null or undefined when calling updateWorkflow.');
        }

        const queryParameters: any = {};

        if (requestParameters.workflowStatus !== undefined) {
            queryParameters['workflowStatus'] = requestParameters.workflowStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflow/update/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowEditDTOToJSON(requestParameters.workflowEditDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowModelFromJSON(jsonValue));
    }

    /**
     */
    async updateWorkflow(requestParameters: UpdateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowModel> {
        const response = await this.updateWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWorkflowTriggerRaw(requestParameters: UpdateWorkflowTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling updateWorkflowTrigger.');
        }

        if (requestParameters.workflowTrigger === null || requestParameters.workflowTrigger === undefined) {
            throw new runtime.RequiredError('workflowTrigger','Required parameter requestParameters.workflowTrigger was null or undefined when calling updateWorkflowTrigger.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflow/update-trigger/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTriggerToJSON(requestParameters.workflowTrigger),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateWorkflowTrigger(requestParameters: UpdateWorkflowTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateWorkflowTriggerRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const UpdateWorkflowWorkflowStatusEnum = {
    ACTIVE: 'ACTIVE',
    INACTIVE: 'INACTIVE'
} as const;
export type UpdateWorkflowWorkflowStatusEnum = typeof UpdateWorkflowWorkflowStatusEnum[keyof typeof UpdateWorkflowWorkflowStatusEnum];
