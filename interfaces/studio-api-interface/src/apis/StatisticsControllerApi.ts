/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProjectStatisticsDataDTO,
  WorkflowStatisticsDataDTO,
} from '../models';
import {
    ProjectStatisticsDataDTOFromJSON,
    ProjectStatisticsDataDTOToJSON,
    WorkflowStatisticsDataDTOFromJSON,
    WorkflowStatisticsDataDTOToJSON,
} from '../models';

export interface GetAllProjectsStatisticsRequest {
    workspaceId: string;
    from?: Date;
    to?: Date;
}

export interface GetGroupedProjectsDateStatisticsRequest {
    workspaceId: string;
    pattern: string;
    from: Date;
    to: Date;
    projectIds?: Array<string>;
}

export interface GetGroupedProjectsStatisticsRequest {
    workspaceId: string;
    from: Date;
    to: Date;
}

export interface GetProjectStatisticsRequest {
    projectId: string;
    from: Date;
    to: Date;
}

export interface GetWorkflowStatisticsRequest {
    workflowId: string;
    from: Date;
    to: Date;
}

/**
 * StatisticsControllerApi - interface
 * 
 * @export
 * @interface StatisticsControllerApiInterface
 */
export interface StatisticsControllerApiInterface {
    /**
     * 
     * @param {string} workspaceId 
     * @param {Date} [from] 
     * @param {Date} [to] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApiInterface
     */
    getAllProjectsStatisticsRaw(requestParameters: GetAllProjectsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectStatisticsDataDTO>>;

    /**
     */
    getAllProjectsStatistics(requestParameters: GetAllProjectsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectStatisticsDataDTO>;

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} pattern 
     * @param {Date} from 
     * @param {Date} to 
     * @param {Array<string>} [projectIds] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApiInterface
     */
    getGroupedProjectsDateStatisticsRaw(requestParameters: GetGroupedProjectsDateStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectStatisticsDataDTO>>>;

    /**
     */
    getGroupedProjectsDateStatistics(requestParameters: GetGroupedProjectsDateStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectStatisticsDataDTO>>;

    /**
     * 
     * @param {string} workspaceId 
     * @param {Date} from 
     * @param {Date} to 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApiInterface
     */
    getGroupedProjectsStatisticsRaw(requestParameters: GetGroupedProjectsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectStatisticsDataDTO>>>;

    /**
     */
    getGroupedProjectsStatistics(requestParameters: GetGroupedProjectsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectStatisticsDataDTO>>;

    /**
     * 
     * @param {string} projectId 
     * @param {Date} from 
     * @param {Date} to 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApiInterface
     */
    getProjectStatisticsRaw(requestParameters: GetProjectStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectStatisticsDataDTO>>;

    /**
     */
    getProjectStatistics(requestParameters: GetProjectStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectStatisticsDataDTO>;

    /**
     * 
     * @param {string} workflowId 
     * @param {Date} from 
     * @param {Date} to 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApiInterface
     */
    getWorkflowStatisticsRaw(requestParameters: GetWorkflowStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowStatisticsDataDTO>>;

    /**
     */
    getWorkflowStatistics(requestParameters: GetWorkflowStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowStatisticsDataDTO>;

}

/**
 * 
 */
export class StatisticsControllerApi extends runtime.BaseAPI implements StatisticsControllerApiInterface {

    /**
     */
    async getAllProjectsStatisticsRaw(requestParameters: GetAllProjectsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectStatisticsDataDTO>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getAllProjectsStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.workspaceId !== undefined) {
            queryParameters['workspaceId'] = requestParameters.workspaceId;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/project/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectStatisticsDataDTOFromJSON(jsonValue));
    }

    /**
     */
    async getAllProjectsStatistics(requestParameters: GetAllProjectsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectStatisticsDataDTO> {
        const response = await this.getAllProjectsStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupedProjectsDateStatisticsRaw(requestParameters: GetGroupedProjectsDateStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectStatisticsDataDTO>>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getGroupedProjectsDateStatistics.');
        }

        if (requestParameters.pattern === null || requestParameters.pattern === undefined) {
            throw new runtime.RequiredError('pattern','Required parameter requestParameters.pattern was null or undefined when calling getGroupedProjectsDateStatistics.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getGroupedProjectsDateStatistics.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getGroupedProjectsDateStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.workspaceId !== undefined) {
            queryParameters['workspaceId'] = requestParameters.workspaceId;
        }

        if (requestParameters.pattern !== undefined) {
            queryParameters['pattern'] = requestParameters.pattern;
        }

        if (requestParameters.projectIds) {
            queryParameters['projectIds'] = requestParameters.projectIds;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/projects/date/grouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectStatisticsDataDTOFromJSON));
    }

    /**
     */
    async getGroupedProjectsDateStatistics(requestParameters: GetGroupedProjectsDateStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectStatisticsDataDTO>> {
        const response = await this.getGroupedProjectsDateStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupedProjectsStatisticsRaw(requestParameters: GetGroupedProjectsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectStatisticsDataDTO>>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getGroupedProjectsStatistics.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getGroupedProjectsStatistics.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getGroupedProjectsStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.workspaceId !== undefined) {
            queryParameters['workspaceId'] = requestParameters.workspaceId;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/projects/grouped`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectStatisticsDataDTOFromJSON));
    }

    /**
     */
    async getGroupedProjectsStatistics(requestParameters: GetGroupedProjectsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectStatisticsDataDTO>> {
        const response = await this.getGroupedProjectsStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectStatisticsRaw(requestParameters: GetProjectStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectStatisticsDataDTO>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectStatistics.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getProjectStatistics.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getProjectStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/project/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectStatisticsDataDTOFromJSON(jsonValue));
    }

    /**
     */
    async getProjectStatistics(requestParameters: GetProjectStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectStatisticsDataDTO> {
        const response = await this.getProjectStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkflowStatisticsRaw(requestParameters: GetWorkflowStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowStatisticsDataDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowStatistics.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getWorkflowStatistics.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getWorkflowStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/workflow/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowStatisticsDataDTOFromJSON(jsonValue));
    }

    /**
     */
    async getWorkflowStatistics(requestParameters: GetWorkflowStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowStatisticsDataDTO> {
        const response = await this.getWorkflowStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
