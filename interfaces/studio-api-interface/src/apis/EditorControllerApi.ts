/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActionBaseDTO,
  ActionCreateDTO,
  FlowWithoutType,
  WorkflowEdge,
  WorkflowTreeDTO,
} from '../models';
import {
    ActionBaseDTOFromJSON,
    ActionBaseDTOToJSON,
    ActionCreateDTOFromJSON,
    ActionCreateDTOToJSON,
    FlowWithoutTypeFromJSON,
    FlowWithoutTypeToJSON,
    WorkflowEdgeFromJSON,
    WorkflowEdgeToJSON,
    WorkflowTreeDTOFromJSON,
    WorkflowTreeDTOToJSON,
} from '../models';

export interface AddActionRequest {
    actionCreateDTO: ActionCreateDTO;
}

export interface ConnectActionsRequest {
    flowWithoutType: FlowWithoutType;
}

export interface ConnectTriggerWithActionRequest {
    workflowId: string;
    targetActionId: string;
}

export interface DeleteConnectionRequest {
    flowWithoutType: FlowWithoutType;
}

export interface DeleteConnectionFromTriggerRequest {
    workflowId: string;
    targetActionId: string;
}

export interface GetWorkflowTreeRequest {
    workflowId: string;
}

/**
 * EditorControllerApi - interface
 * 
 * @export
 * @interface EditorControllerApiInterface
 */
export interface EditorControllerApiInterface {
    /**
     * 
     * @param {ActionCreateDTO} actionCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorControllerApiInterface
     */
    addActionRaw(requestParameters: AddActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActionBaseDTO>>;

    /**
     */
    addAction(requestParameters: AddActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActionBaseDTO>;

    /**
     * 
     * @param {FlowWithoutType} flowWithoutType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorControllerApiInterface
     */
    connectActionsRaw(requestParameters: ConnectActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowEdge>>;

    /**
     */
    connectActions(requestParameters: ConnectActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowEdge>;

    /**
     * 
     * @param {string} workflowId 
     * @param {string} targetActionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorControllerApiInterface
     */
    connectTriggerWithActionRaw(requestParameters: ConnectTriggerWithActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowEdge>>;

    /**
     */
    connectTriggerWithAction(requestParameters: ConnectTriggerWithActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowEdge>;

    /**
     * 
     * @param {FlowWithoutType} flowWithoutType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorControllerApiInterface
     */
    deleteConnectionRaw(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteConnection(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} workflowId 
     * @param {string} targetActionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorControllerApiInterface
     */
    deleteConnectionFromTriggerRaw(requestParameters: DeleteConnectionFromTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteConnectionFromTrigger(requestParameters: DeleteConnectionFromTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorControllerApiInterface
     */
    getWorkflowTreeRaw(requestParameters: GetWorkflowTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTreeDTO>>;

    /**
     */
    getWorkflowTree(requestParameters: GetWorkflowTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTreeDTO>;

}

/**
 * 
 */
export class EditorControllerApi extends runtime.BaseAPI implements EditorControllerApiInterface {

    /**
     */
    async addActionRaw(requestParameters: AddActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActionBaseDTO>> {
        if (requestParameters.actionCreateDTO === null || requestParameters.actionCreateDTO === undefined) {
            throw new runtime.RequiredError('actionCreateDTO','Required parameter requestParameters.actionCreateDTO was null or undefined when calling addAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/editor/add-action`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActionCreateDTOToJSON(requestParameters.actionCreateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionBaseDTOFromJSON(jsonValue));
    }

    /**
     */
    async addAction(requestParameters: AddActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActionBaseDTO> {
        const response = await this.addActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async connectActionsRaw(requestParameters: ConnectActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowEdge>> {
        if (requestParameters.flowWithoutType === null || requestParameters.flowWithoutType === undefined) {
            throw new runtime.RequiredError('flowWithoutType','Required parameter requestParameters.flowWithoutType was null or undefined when calling connectActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/editor/connect-actions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FlowWithoutTypeToJSON(requestParameters.flowWithoutType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowEdgeFromJSON(jsonValue));
    }

    /**
     */
    async connectActions(requestParameters: ConnectActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowEdge> {
        const response = await this.connectActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async connectTriggerWithActionRaw(requestParameters: ConnectTriggerWithActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowEdge>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling connectTriggerWithAction.');
        }

        if (requestParameters.targetActionId === null || requestParameters.targetActionId === undefined) {
            throw new runtime.RequiredError('targetActionId','Required parameter requestParameters.targetActionId was null or undefined when calling connectTriggerWithAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/editor/connect-trigger-with-action/{workflowId}/{targetActionId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))).replace(`{${"targetActionId"}}`, encodeURIComponent(String(requestParameters.targetActionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowEdgeFromJSON(jsonValue));
    }

    /**
     */
    async connectTriggerWithAction(requestParameters: ConnectTriggerWithActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowEdge> {
        const response = await this.connectTriggerWithActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteConnectionRaw(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.flowWithoutType === null || requestParameters.flowWithoutType === undefined) {
            throw new runtime.RequiredError('flowWithoutType','Required parameter requestParameters.flowWithoutType was null or undefined when calling deleteConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/editor/delete-connection`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: FlowWithoutTypeToJSON(requestParameters.flowWithoutType),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteConnection(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConnectionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteConnectionFromTriggerRaw(requestParameters: DeleteConnectionFromTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling deleteConnectionFromTrigger.');
        }

        if (requestParameters.targetActionId === null || requestParameters.targetActionId === undefined) {
            throw new runtime.RequiredError('targetActionId','Required parameter requestParameters.targetActionId was null or undefined when calling deleteConnectionFromTrigger.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/editor/delete-connection-from-trigger/{workflowId}/{targetActionId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))).replace(`{${"targetActionId"}}`, encodeURIComponent(String(requestParameters.targetActionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteConnectionFromTrigger(requestParameters: DeleteConnectionFromTriggerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConnectionFromTriggerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getWorkflowTreeRaw(requestParameters: GetWorkflowTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTreeDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowTree.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/editor/tree/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTreeDTOFromJSON(jsonValue));
    }

    /**
     */
    async getWorkflowTree(requestParameters: GetWorkflowTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTreeDTO> {
        const response = await this.getWorkflowTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
