/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActionConfiguration,
  GlobalVariableDTO,
  InstanceActionModel,
  InstanceLogModel,
  InstanceTreeDTO,
  PagingResponseDTOInstanceBaseDTO,
  PagingResponseDTOInstanceLogModel,
  SearchRequestDTO,
} from '../models';
import {
    ActionConfigurationFromJSON,
    ActionConfigurationToJSON,
    GlobalVariableDTOFromJSON,
    GlobalVariableDTOToJSON,
    InstanceActionModelFromJSON,
    InstanceActionModelToJSON,
    InstanceLogModelFromJSON,
    InstanceLogModelToJSON,
    InstanceTreeDTOFromJSON,
    InstanceTreeDTOToJSON,
    PagingResponseDTOInstanceBaseDTOFromJSON,
    PagingResponseDTOInstanceBaseDTOToJSON,
    PagingResponseDTOInstanceLogModelFromJSON,
    PagingResponseDTOInstanceLogModelToJSON,
    SearchRequestDTOFromJSON,
    SearchRequestDTOToJSON,
} from '../models';

export interface DeleteInstanceRequest {
    instanceId: string;
}

export interface GetInstanceActionByIdRequest {
    instanceActionId: string;
}

export interface GetInstanceGlobalVariablesRequest {
    instanceId: string;
}

export interface GetInstanceLogsRequest {
    instanceId: string;
}

export interface GetInstanceTreeRequest {
    instanceId: string;
}

export interface SearchLogsRequest {
    instanceId: string;
    searchRequestDTO: SearchRequestDTO;
}

export interface SearchUserInstancesRequest {
    workspaceId: string;
    searchRequestDTO: SearchRequestDTO;
}

export interface SearchWorkflowInstancesRequest {
    workflowId: string;
    workspaceId: string;
    searchRequestDTO: SearchRequestDTO;
    archived?: boolean;
}

export interface UpdateInstanceActionRequest {
    instanceActionId: string;
    actionConfiguration: ActionConfiguration;
}

/**
 * InstanceControllerApi - interface
 * 
 * @export
 * @interface InstanceControllerApiInterface
 */
export interface InstanceControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    archiveInstancesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     */
    archiveInstances(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @param {string} instanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    deleteInstanceRaw(requestParameters: DeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteInstance(requestParameters: DeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} instanceActionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    getInstanceActionByIdRaw(requestParameters: GetInstanceActionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceActionModel>>;

    /**
     */
    getInstanceActionById(requestParameters: GetInstanceActionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceActionModel>;

    /**
     * 
     * @param {string} instanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    getInstanceGlobalVariablesRaw(requestParameters: GetInstanceGlobalVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GlobalVariableDTO | undefined; }>>;

    /**
     */
    getInstanceGlobalVariables(requestParameters: GetInstanceGlobalVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GlobalVariableDTO | undefined; }>;

    /**
     * 
     * @param {string} instanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    getInstanceLogsRaw(requestParameters: GetInstanceLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLogModel>>>;

    /**
     */
    getInstanceLogs(requestParameters: GetInstanceLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLogModel>>;

    /**
     * 
     * @param {string} instanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    getInstanceTreeRaw(requestParameters: GetInstanceTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceTreeDTO>>;

    /**
     */
    getInstanceTree(requestParameters: GetInstanceTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceTreeDTO>;

    /**
     * 
     * @param {string} instanceId 
     * @param {SearchRequestDTO} searchRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    searchLogsRaw(requestParameters: SearchLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOInstanceLogModel>>;

    /**
     */
    searchLogs(requestParameters: SearchLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOInstanceLogModel>;

    /**
     * 
     * @param {string} workspaceId 
     * @param {SearchRequestDTO} searchRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    searchUserInstancesRaw(requestParameters: SearchUserInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOInstanceBaseDTO>>;

    /**
     */
    searchUserInstances(requestParameters: SearchUserInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOInstanceBaseDTO>;

    /**
     * 
     * @param {string} workflowId 
     * @param {string} workspaceId 
     * @param {SearchRequestDTO} searchRequestDTO 
     * @param {boolean} [archived] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    searchWorkflowInstancesRaw(requestParameters: SearchWorkflowInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOInstanceBaseDTO>>;

    /**
     */
    searchWorkflowInstances(requestParameters: SearchWorkflowInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOInstanceBaseDTO>;

    /**
     * 
     * @param {string} instanceActionId 
     * @param {ActionConfiguration} actionConfiguration 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceControllerApiInterface
     */
    updateInstanceActionRaw(requestParameters: UpdateInstanceActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceActionModel>>;

    /**
     */
    updateInstanceAction(requestParameters: UpdateInstanceActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceActionModel>;

}

/**
 * 
 */
export class InstanceControllerApi extends runtime.BaseAPI implements InstanceControllerApiInterface {

    /**
     */
    async archiveInstancesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instance/archive/rotation`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async archiveInstances(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.archiveInstancesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteInstanceRaw(requestParameters: DeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling deleteInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instance/delete/{instanceId}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteInstance(requestParameters: DeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getInstanceActionByIdRaw(requestParameters: GetInstanceActionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceActionModel>> {
        if (requestParameters.instanceActionId === null || requestParameters.instanceActionId === undefined) {
            throw new runtime.RequiredError('instanceActionId','Required parameter requestParameters.instanceActionId was null or undefined when calling getInstanceActionById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instance/instance-action/{instanceActionId}`.replace(`{${"instanceActionId"}}`, encodeURIComponent(String(requestParameters.instanceActionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceActionModelFromJSON(jsonValue));
    }

    /**
     */
    async getInstanceActionById(requestParameters: GetInstanceActionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceActionModel> {
        const response = await this.getInstanceActionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getInstanceGlobalVariablesRaw(requestParameters: GetInstanceGlobalVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GlobalVariableDTO | undefined; }>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling getInstanceGlobalVariables.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instance/global-variables/{instanceId}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, GlobalVariableDTOFromJSON));
    }

    /**
     */
    async getInstanceGlobalVariables(requestParameters: GetInstanceGlobalVariablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GlobalVariableDTO | undefined; }> {
        const response = await this.getInstanceGlobalVariablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getInstanceLogsRaw(requestParameters: GetInstanceLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLogModel>>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling getInstanceLogs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instance/instance-logs/{instanceId}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstanceLogModelFromJSON));
    }

    /**
     */
    async getInstanceLogs(requestParameters: GetInstanceLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLogModel>> {
        const response = await this.getInstanceLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getInstanceTreeRaw(requestParameters: GetInstanceTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceTreeDTO>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling getInstanceTree.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instance/tree/{instanceId}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceTreeDTOFromJSON(jsonValue));
    }

    /**
     */
    async getInstanceTree(requestParameters: GetInstanceTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceTreeDTO> {
        const response = await this.getInstanceTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchLogsRaw(requestParameters: SearchLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOInstanceLogModel>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling searchLogs.');
        }

        if (requestParameters.searchRequestDTO === null || requestParameters.searchRequestDTO === undefined) {
            throw new runtime.RequiredError('searchRequestDTO','Required parameter requestParameters.searchRequestDTO was null or undefined when calling searchLogs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/instance/logs/search/{instanceId}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDTOToJSON(requestParameters.searchRequestDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagingResponseDTOInstanceLogModelFromJSON(jsonValue));
    }

    /**
     */
    async searchLogs(requestParameters: SearchLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOInstanceLogModel> {
        const response = await this.searchLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchUserInstancesRaw(requestParameters: SearchUserInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOInstanceBaseDTO>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling searchUserInstances.');
        }

        if (requestParameters.searchRequestDTO === null || requestParameters.searchRequestDTO === undefined) {
            throw new runtime.RequiredError('searchRequestDTO','Required parameter requestParameters.searchRequestDTO was null or undefined when calling searchUserInstances.');
        }

        const queryParameters: any = {};

        if (requestParameters.workspaceId !== undefined) {
            queryParameters['workspaceId'] = requestParameters.workspaceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/instance/user/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDTOToJSON(requestParameters.searchRequestDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagingResponseDTOInstanceBaseDTOFromJSON(jsonValue));
    }

    /**
     */
    async searchUserInstances(requestParameters: SearchUserInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOInstanceBaseDTO> {
        const response = await this.searchUserInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchWorkflowInstancesRaw(requestParameters: SearchWorkflowInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOInstanceBaseDTO>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling searchWorkflowInstances.');
        }

        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling searchWorkflowInstances.');
        }

        if (requestParameters.searchRequestDTO === null || requestParameters.searchRequestDTO === undefined) {
            throw new runtime.RequiredError('searchRequestDTO','Required parameter requestParameters.searchRequestDTO was null or undefined when calling searchWorkflowInstances.');
        }

        const queryParameters: any = {};

        if (requestParameters.workspaceId !== undefined) {
            queryParameters['workspaceId'] = requestParameters.workspaceId;
        }

        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/instance/workflow/search/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDTOToJSON(requestParameters.searchRequestDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagingResponseDTOInstanceBaseDTOFromJSON(jsonValue));
    }

    /**
     */
    async searchWorkflowInstances(requestParameters: SearchWorkflowInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOInstanceBaseDTO> {
        const response = await this.searchWorkflowInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateInstanceActionRaw(requestParameters: UpdateInstanceActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceActionModel>> {
        if (requestParameters.instanceActionId === null || requestParameters.instanceActionId === undefined) {
            throw new runtime.RequiredError('instanceActionId','Required parameter requestParameters.instanceActionId was null or undefined when calling updateInstanceAction.');
        }

        if (requestParameters.actionConfiguration === null || requestParameters.actionConfiguration === undefined) {
            throw new runtime.RequiredError('actionConfiguration','Required parameter requestParameters.actionConfiguration was null or undefined when calling updateInstanceAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/instance/instance-action/update/{instanceActionId}`.replace(`{${"instanceActionId"}}`, encodeURIComponent(String(requestParameters.instanceActionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ActionConfigurationToJSON(requestParameters.actionConfiguration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceActionModelFromJSON(jsonValue));
    }

    /**
     */
    async updateInstanceAction(requestParameters: UpdateInstanceActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceActionModel> {
        const response = await this.updateInstanceActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
