/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EngineRestartDTO,
  InstanceActionUpdateWebsocketDTO,
  InstanceEngineMessageDTO,
  InstanceLogModel,
  InstanceUpdateWebsocketDTO,
  SendMeInstanceDTO,
  StatisticsUpdateEngineDTO,
  WorkflowEngineBaseDTO,
} from '../models';
import {
    EngineRestartDTOFromJSON,
    EngineRestartDTOToJSON,
    InstanceActionUpdateWebsocketDTOFromJSON,
    InstanceActionUpdateWebsocketDTOToJSON,
    InstanceEngineMessageDTOFromJSON,
    InstanceEngineMessageDTOToJSON,
    InstanceLogModelFromJSON,
    InstanceLogModelToJSON,
    InstanceUpdateWebsocketDTOFromJSON,
    InstanceUpdateWebsocketDTOToJSON,
    SendMeInstanceDTOFromJSON,
    SendMeInstanceDTOToJSON,
    StatisticsUpdateEngineDTOFromJSON,
    StatisticsUpdateEngineDTOToJSON,
    WorkflowEngineBaseDTOFromJSON,
    WorkflowEngineBaseDTOToJSON,
} from '../models';

export interface EngineRestartDTORequest {
    engineRestartDTO: EngineRestartDTO;
}

export interface GetAvailableEnginesRequest {
    workspaceId: string;
}

export interface GetTriggerMessageRequest {
    instanceId: string;
}

export interface InstanceActionUpdateRequest {
    instanceActionUpdateWebsocketDTO: Array<InstanceActionUpdateWebsocketDTO>;
}

export interface InstanceUpdateRequest {
    instanceUpdateWebsocketDTO: Array<InstanceUpdateWebsocketDTO>;
}

export interface LogEventRequest {
    instanceLogModel: Array<InstanceLogModel>;
}

export interface MessageTypeRequest {
    body: string;
}

export interface SendMeInstanceRequest {
    sendMeInstanceDTO: SendMeInstanceDTO;
}

export interface StatisticsUpdateRequest {
    statisticsUpdateEngineDTO: Array<StatisticsUpdateEngineDTO>;
}

/**
 * WorkflowEngineControllerApi - interface
 * 
 * @export
 * @interface WorkflowEngineControllerApiInterface
 */
export interface WorkflowEngineControllerApiInterface {
    /**
     * 
     * @param {EngineRestartDTO} engineRestartDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    engineRestartDTORaw(requestParameters: EngineRestartDTORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    engineRestartDTO(requestParameters: EngineRestartDTORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} workspaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    getAvailableEnginesRaw(requestParameters: GetAvailableEnginesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowEngineBaseDTO>>>;

    /**
     */
    getAvailableEngines(requestParameters: GetAvailableEnginesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowEngineBaseDTO>>;

    /**
     * 
     * @param {string} instanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    getTriggerMessageRaw(requestParameters: GetTriggerMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceEngineMessageDTO>>;

    /**
     */
    getTriggerMessage(requestParameters: GetTriggerMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceEngineMessageDTO>;

    /**
     * 
     * @param {Array<InstanceActionUpdateWebsocketDTO>} instanceActionUpdateWebsocketDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    instanceActionUpdateRaw(requestParameters: InstanceActionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    instanceActionUpdate(requestParameters: InstanceActionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {Array<InstanceUpdateWebsocketDTO>} instanceUpdateWebsocketDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    instanceUpdateRaw(requestParameters: InstanceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    instanceUpdate(requestParameters: InstanceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {Array<InstanceLogModel>} instanceLogModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    logEventRaw(requestParameters: LogEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    logEvent(requestParameters: LogEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    messageTypeRaw(requestParameters: MessageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    messageType(requestParameters: MessageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {SendMeInstanceDTO} sendMeInstanceDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    sendMeInstanceRaw(requestParameters: SendMeInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    sendMeInstance(requestParameters: SendMeInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {Array<StatisticsUpdateEngineDTO>} statisticsUpdateEngineDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowEngineControllerApiInterface
     */
    statisticsUpdateRaw(requestParameters: StatisticsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    statisticsUpdate(requestParameters: StatisticsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class WorkflowEngineControllerApi extends runtime.BaseAPI implements WorkflowEngineControllerApiInterface {

    /**
     */
    async engineRestartDTORaw(requestParameters: EngineRestartDTORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.engineRestartDTO === null || requestParameters.engineRestartDTO === undefined) {
            throw new runtime.RequiredError('engineRestartDTO','Required parameter requestParameters.engineRestartDTO was null or undefined when calling engineRestartDTO.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/engine/restart`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EngineRestartDTOToJSON(requestParameters.engineRestartDTO),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async engineRestartDTO(requestParameters: EngineRestartDTORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.engineRestartDTORaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAvailableEnginesRaw(requestParameters: GetAvailableEnginesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowEngineBaseDTO>>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getAvailableEngines.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/engine/available-engines/{workspaceId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowEngineBaseDTOFromJSON));
    }

    /**
     */
    async getAvailableEngines(requestParameters: GetAvailableEnginesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowEngineBaseDTO>> {
        const response = await this.getAvailableEnginesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTriggerMessageRaw(requestParameters: GetTriggerMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceEngineMessageDTO>> {
        if (requestParameters.instanceId === null || requestParameters.instanceId === undefined) {
            throw new runtime.RequiredError('instanceId','Required parameter requestParameters.instanceId was null or undefined when calling getTriggerMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/engine/generate-instance-engine-message/{instanceId}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters.instanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceEngineMessageDTOFromJSON(jsonValue));
    }

    /**
     */
    async getTriggerMessage(requestParameters: GetTriggerMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceEngineMessageDTO> {
        const response = await this.getTriggerMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async instanceActionUpdateRaw(requestParameters: InstanceActionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.instanceActionUpdateWebsocketDTO === null || requestParameters.instanceActionUpdateWebsocketDTO === undefined) {
            throw new runtime.RequiredError('instanceActionUpdateWebsocketDTO','Required parameter requestParameters.instanceActionUpdateWebsocketDTO was null or undefined when calling instanceActionUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/engine/instance-action-update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.instanceActionUpdateWebsocketDTO.map(InstanceActionUpdateWebsocketDTOToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async instanceActionUpdate(requestParameters: InstanceActionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.instanceActionUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async instanceUpdateRaw(requestParameters: InstanceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.instanceUpdateWebsocketDTO === null || requestParameters.instanceUpdateWebsocketDTO === undefined) {
            throw new runtime.RequiredError('instanceUpdateWebsocketDTO','Required parameter requestParameters.instanceUpdateWebsocketDTO was null or undefined when calling instanceUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/engine/instance-update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.instanceUpdateWebsocketDTO.map(InstanceUpdateWebsocketDTOToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async instanceUpdate(requestParameters: InstanceUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.instanceUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async logEventRaw(requestParameters: LogEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.instanceLogModel === null || requestParameters.instanceLogModel === undefined) {
            throw new runtime.RequiredError('instanceLogModel','Required parameter requestParameters.instanceLogModel was null or undefined when calling logEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/engine/log`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.instanceLogModel.map(InstanceLogModelToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async logEvent(requestParameters: LogEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logEventRaw(requestParameters, initOverrides);
    }

    /**
     */
    async messageTypeRaw(requestParameters: MessageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling messageType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/engine/message-type`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async messageType(requestParameters: MessageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.messageTypeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async sendMeInstanceRaw(requestParameters: SendMeInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sendMeInstanceDTO === null || requestParameters.sendMeInstanceDTO === undefined) {
            throw new runtime.RequiredError('sendMeInstanceDTO','Required parameter requestParameters.sendMeInstanceDTO was null or undefined when calling sendMeInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/engine/send-me-instance`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SendMeInstanceDTOToJSON(requestParameters.sendMeInstanceDTO),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async sendMeInstance(requestParameters: SendMeInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendMeInstanceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async statisticsUpdateRaw(requestParameters: StatisticsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.statisticsUpdateEngineDTO === null || requestParameters.statisticsUpdateEngineDTO === undefined) {
            throw new runtime.RequiredError('statisticsUpdateEngineDTO','Required parameter requestParameters.statisticsUpdateEngineDTO was null or undefined when calling statisticsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/engine/statistics-update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.statisticsUpdateEngineDTO.map(StatisticsUpdateEngineDTOToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async statisticsUpdate(requestParameters: StatisticsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.statisticsUpdateRaw(requestParameters, initOverrides);
    }

}
