/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountMember,
  InviteUserDTO,
  PairAccountMemberString,
} from '../models';
import {
    AccountMemberFromJSON,
    AccountMemberToJSON,
    InviteUserDTOFromJSON,
    InviteUserDTOToJSON,
    PairAccountMemberStringFromJSON,
    PairAccountMemberStringToJSON,
} from '../models';

export interface AccountMembersRequest {
    workspaceId: string;
}

export interface HandleInvitationRequest {
    workspaceId: string;
    inviteId: string;
    acceptInvite: boolean;
}

export interface InviteMemberRequest {
    inviteUserDTO: InviteUserDTO;
}

export interface RevokeAccessRequest {
    inviteId: string;
}

export interface ViewInvitationRequest {
    workspaceId: string;
    inviteId: string;
}

/**
 * AccountMemberControllerApi - interface
 * 
 * @export
 * @interface AccountMemberControllerApiInterface
 */
export interface AccountMemberControllerApiInterface {
    /**
     * 
     * @param {string} workspaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMemberControllerApiInterface
     */
    accountMembersRaw(requestParameters: AccountMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccountMember>>>;

    /**
     */
    accountMembers(requestParameters: AccountMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccountMember>>;

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} inviteId 
     * @param {boolean} acceptInvite 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMemberControllerApiInterface
     */
    handleInvitationRaw(requestParameters: HandleInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountMember>>;

    /**
     */
    handleInvitation(requestParameters: HandleInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountMember>;

    /**
     * 
     * @param {InviteUserDTO} inviteUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMemberControllerApiInterface
     */
    inviteMemberRaw(requestParameters: InviteMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountMember>>;

    /**
     */
    inviteMember(requestParameters: InviteMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountMember>;

    /**
     * 
     * @param {string} inviteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMemberControllerApiInterface
     */
    revokeAccessRaw(requestParameters: RevokeAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    revokeAccess(requestParameters: RevokeAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} workspaceId 
     * @param {string} inviteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountMemberControllerApiInterface
     */
    viewInvitationRaw(requestParameters: ViewInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PairAccountMemberString>>;

    /**
     */
    viewInvitation(requestParameters: ViewInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PairAccountMemberString>;

}

/**
 * 
 */
export class AccountMemberControllerApi extends runtime.BaseAPI implements AccountMemberControllerApiInterface {

    /**
     */
    async accountMembersRaw(requestParameters: AccountMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccountMember>>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling accountMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.workspaceId !== undefined) {
            queryParameters['workspaceId'] = requestParameters.workspaceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account-member/account-members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountMemberFromJSON));
    }

    /**
     */
    async accountMembers(requestParameters: AccountMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccountMember>> {
        const response = await this.accountMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async handleInvitationRaw(requestParameters: HandleInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountMember>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling handleInvitation.');
        }

        if (requestParameters.inviteId === null || requestParameters.inviteId === undefined) {
            throw new runtime.RequiredError('inviteId','Required parameter requestParameters.inviteId was null or undefined when calling handleInvitation.');
        }

        if (requestParameters.acceptInvite === null || requestParameters.acceptInvite === undefined) {
            throw new runtime.RequiredError('acceptInvite','Required parameter requestParameters.acceptInvite was null or undefined when calling handleInvitation.');
        }

        const queryParameters: any = {};

        if (requestParameters.acceptInvite !== undefined) {
            queryParameters['acceptInvite'] = requestParameters.acceptInvite;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account-member/accept-invitation/{workspaceId}/{inviteId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))).replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters.inviteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountMemberFromJSON(jsonValue));
    }

    /**
     */
    async handleInvitation(requestParameters: HandleInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountMember> {
        const response = await this.handleInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async inviteMemberRaw(requestParameters: InviteMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountMember>> {
        if (requestParameters.inviteUserDTO === null || requestParameters.inviteUserDTO === undefined) {
            throw new runtime.RequiredError('inviteUserDTO','Required parameter requestParameters.inviteUserDTO was null or undefined when calling inviteMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account-member/invite-member`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InviteUserDTOToJSON(requestParameters.inviteUserDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountMemberFromJSON(jsonValue));
    }

    /**
     */
    async inviteMember(requestParameters: InviteMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountMember> {
        const response = await this.inviteMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async revokeAccessRaw(requestParameters: RevokeAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inviteId === null || requestParameters.inviteId === undefined) {
            throw new runtime.RequiredError('inviteId','Required parameter requestParameters.inviteId was null or undefined when calling revokeAccess.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account-member/account-member/revoke/{inviteId}`.replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters.inviteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async revokeAccess(requestParameters: RevokeAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeAccessRaw(requestParameters, initOverrides);
    }

    /**
     */
    async viewInvitationRaw(requestParameters: ViewInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PairAccountMemberString>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling viewInvitation.');
        }

        if (requestParameters.inviteId === null || requestParameters.inviteId === undefined) {
            throw new runtime.RequiredError('inviteId','Required parameter requestParameters.inviteId was null or undefined when calling viewInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account-member/view-invitation/{workspaceId}/{inviteId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))).replace(`{${"inviteId"}}`, encodeURIComponent(String(requestParameters.inviteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PairAccountMemberStringFromJSON(jsonValue));
    }

    /**
     */
    async viewInvitation(requestParameters: ViewInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PairAccountMemberString> {
        const response = await this.viewInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
