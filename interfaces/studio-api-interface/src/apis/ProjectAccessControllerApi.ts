/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagingResponseDTOProjectMemberAccessModel,
  ProjectMemberAccessModel,
  SearchRequestDTO,
} from '../models';
import {
    PagingResponseDTOProjectMemberAccessModelFromJSON,
    PagingResponseDTOProjectMemberAccessModelToJSON,
    ProjectMemberAccessModelFromJSON,
    ProjectMemberAccessModelToJSON,
    SearchRequestDTOFromJSON,
    SearchRequestDTOToJSON,
} from '../models';

export interface DeleteProjectMemberRequest {
    projectId: string;
    projectMemberId: string;
}

export interface GetInvitationRequest {
    projectId: string;
    projectMemberId: string;
}

export interface InviteProjectMemberRequest {
    projectId: string;
    email: string;
    requestBody: Set<string>;
}

export interface MemberHandlesInvitationRequest {
    projectId: string;
    projectMemberId: string;
    status: MemberHandlesInvitationStatusEnum;
}

export interface SearchProjectMembersRequest {
    projectId: string;
    searchRequestDTO: SearchRequestDTO;
}

export interface UpdateProjectMemberRequest {
    projectId: string;
    projectMemberId: string;
    requestBody: Set<string>;
}

/**
 * ProjectAccessControllerApi - interface
 * 
 * @export
 * @interface ProjectAccessControllerApiInterface
 */
export interface ProjectAccessControllerApiInterface {
    /**
     * 
     * @param {string} projectId 
     * @param {string} projectMemberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAccessControllerApiInterface
     */
    deleteProjectMemberRaw(requestParameters: DeleteProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteProjectMember(requestParameters: DeleteProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} projectId 
     * @param {string} projectMemberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAccessControllerApiInterface
     */
    getInvitationRaw(requestParameters: GetInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMemberAccessModel>>;

    /**
     */
    getInvitation(requestParameters: GetInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMemberAccessModel>;

    /**
     * 
     * @param {string} projectId 
     * @param {string} email 
     * @param {Set<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAccessControllerApiInterface
     */
    inviteProjectMemberRaw(requestParameters: InviteProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMemberAccessModel>>;

    /**
     */
    inviteProjectMember(requestParameters: InviteProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMemberAccessModel>;

    /**
     * 
     * @param {string} projectId 
     * @param {string} projectMemberId 
     * @param {'INVITED' | 'ACCEPTED' | 'REJECTED'} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAccessControllerApiInterface
     */
    memberHandlesInvitationRaw(requestParameters: MemberHandlesInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    memberHandlesInvitation(requestParameters: MemberHandlesInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} projectId 
     * @param {SearchRequestDTO} searchRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAccessControllerApiInterface
     */
    searchProjectMembersRaw(requestParameters: SearchProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOProjectMemberAccessModel>>;

    /**
     */
    searchProjectMembers(requestParameters: SearchProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOProjectMemberAccessModel>;

    /**
     * 
     * @param {string} projectId 
     * @param {string} projectMemberId 
     * @param {Set<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAccessControllerApiInterface
     */
    updateProjectMemberRaw(requestParameters: UpdateProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMemberAccessModel>>;

    /**
     */
    updateProjectMember(requestParameters: UpdateProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMemberAccessModel>;

}

/**
 * 
 */
export class ProjectAccessControllerApi extends runtime.BaseAPI implements ProjectAccessControllerApiInterface {

    /**
     */
    async deleteProjectMemberRaw(requestParameters: DeleteProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteProjectMember.');
        }

        if (requestParameters.projectMemberId === null || requestParameters.projectMemberId === undefined) {
            throw new runtime.RequiredError('projectMemberId','Required parameter requestParameters.projectMemberId was null or undefined when calling deleteProjectMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-access/delete-member/{projectId}/{projectMemberId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"projectMemberId"}}`, encodeURIComponent(String(requestParameters.projectMemberId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteProjectMember(requestParameters: DeleteProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectMemberRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getInvitationRaw(requestParameters: GetInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMemberAccessModel>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getInvitation.');
        }

        if (requestParameters.projectMemberId === null || requestParameters.projectMemberId === undefined) {
            throw new runtime.RequiredError('projectMemberId','Required parameter requestParameters.projectMemberId was null or undefined when calling getInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-access/get-invitation/{projectId}/{projectMemberId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"projectMemberId"}}`, encodeURIComponent(String(requestParameters.projectMemberId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectMemberAccessModelFromJSON(jsonValue));
    }

    /**
     */
    async getInvitation(requestParameters: GetInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMemberAccessModel> {
        const response = await this.getInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async inviteProjectMemberRaw(requestParameters: InviteProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMemberAccessModel>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling inviteProjectMember.');
        }

        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling inviteProjectMember.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling inviteProjectMember.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/project-access/invite-member/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectMemberAccessModelFromJSON(jsonValue));
    }

    /**
     */
    async inviteProjectMember(requestParameters: InviteProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMemberAccessModel> {
        const response = await this.inviteProjectMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async memberHandlesInvitationRaw(requestParameters: MemberHandlesInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling memberHandlesInvitation.');
        }

        if (requestParameters.projectMemberId === null || requestParameters.projectMemberId === undefined) {
            throw new runtime.RequiredError('projectMemberId','Required parameter requestParameters.projectMemberId was null or undefined when calling memberHandlesInvitation.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling memberHandlesInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-access/member-handles-invitation/{projectId}/{projectMemberId}/{status}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"projectMemberId"}}`, encodeURIComponent(String(requestParameters.projectMemberId))).replace(`{${"status"}}`, encodeURIComponent(String(requestParameters.status))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async memberHandlesInvitation(requestParameters: MemberHandlesInvitationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.memberHandlesInvitationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async searchProjectMembersRaw(requestParameters: SearchProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOProjectMemberAccessModel>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling searchProjectMembers.');
        }

        if (requestParameters.searchRequestDTO === null || requestParameters.searchRequestDTO === undefined) {
            throw new runtime.RequiredError('searchRequestDTO','Required parameter requestParameters.searchRequestDTO was null or undefined when calling searchProjectMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/project-access/search/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDTOToJSON(requestParameters.searchRequestDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagingResponseDTOProjectMemberAccessModelFromJSON(jsonValue));
    }

    /**
     */
    async searchProjectMembers(requestParameters: SearchProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOProjectMemberAccessModel> {
        const response = await this.searchProjectMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProjectMemberRaw(requestParameters: UpdateProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectMemberAccessModel>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateProjectMember.');
        }

        if (requestParameters.projectMemberId === null || requestParameters.projectMemberId === undefined) {
            throw new runtime.RequiredError('projectMemberId','Required parameter requestParameters.projectMemberId was null or undefined when calling updateProjectMember.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateProjectMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/project-access/update-member/{projectId}/{projectMemberId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"projectMemberId"}}`, encodeURIComponent(String(requestParameters.projectMemberId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectMemberAccessModelFromJSON(jsonValue));
    }

    /**
     */
    async updateProjectMember(requestParameters: UpdateProjectMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectMemberAccessModel> {
        const response = await this.updateProjectMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MemberHandlesInvitationStatusEnum = {
    INVITED: 'INVITED',
    ACCEPTED: 'ACCEPTED',
    REJECTED: 'REJECTED'
} as const;
export type MemberHandlesInvitationStatusEnum = typeof MemberHandlesInvitationStatusEnum[keyof typeof MemberHandlesInvitationStatusEnum];
