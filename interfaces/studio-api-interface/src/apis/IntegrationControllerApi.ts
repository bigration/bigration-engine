/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IntegrationBaseDTO,
  IntegrationEditDTO,
  IntegrationModel,
  PagingResponseDTOIntegrationBaseDTO,
  SearchRequestDTO,
} from '../models';
import {
    IntegrationBaseDTOFromJSON,
    IntegrationBaseDTOToJSON,
    IntegrationEditDTOFromJSON,
    IntegrationEditDTOToJSON,
    IntegrationModelFromJSON,
    IntegrationModelToJSON,
    PagingResponseDTOIntegrationBaseDTOFromJSON,
    PagingResponseDTOIntegrationBaseDTOToJSON,
    SearchRequestDTOFromJSON,
    SearchRequestDTOToJSON,
} from '../models';

export interface CreateIntegrationRequest {
    integrationEditDTO: IntegrationEditDTO;
}

export interface DeleteIntegrationRequest {
    integrationId: string;
}

export interface GetSingleIntegrationRequest {
    integrationId: string;
}

export interface GetWorkspaceIntegrationsRequest {
    workspaceId: string;
    type: GetWorkspaceIntegrationsTypeEnum;
}

export interface SearchIntegrationsRequest {
    workspaceId: string;
    searchRequestDTO: SearchRequestDTO;
}

export interface UpdateIntegrationRequest {
    integrationId: string;
    integrationEditDTO: IntegrationEditDTO;
}

/**
 * IntegrationControllerApi - interface
 * 
 * @export
 * @interface IntegrationControllerApiInterface
 */
export interface IntegrationControllerApiInterface {
    /**
     * 
     * @param {IntegrationEditDTO} integrationEditDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationControllerApiInterface
     */
    createIntegrationRaw(requestParameters: CreateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationModel>>;

    /**
     */
    createIntegration(requestParameters: CreateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationModel>;

    /**
     * 
     * @param {string} integrationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationControllerApiInterface
     */
    deleteIntegrationRaw(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteIntegration(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} integrationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationControllerApiInterface
     */
    getSingleIntegrationRaw(requestParameters: GetSingleIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationEditDTO>>;

    /**
     */
    getSingleIntegration(requestParameters: GetSingleIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationEditDTO>;

    /**
     * 
     * @param {string} workspaceId 
     * @param {'EMAIL' | 'REST' | 'TELEGRAM' | 'OPENAI'} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationControllerApiInterface
     */
    getWorkspaceIntegrationsRaw(requestParameters: GetWorkspaceIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntegrationBaseDTO>>>;

    /**
     */
    getWorkspaceIntegrations(requestParameters: GetWorkspaceIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntegrationBaseDTO>>;

    /**
     * 
     * @param {string} workspaceId 
     * @param {SearchRequestDTO} searchRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationControllerApiInterface
     */
    searchIntegrationsRaw(requestParameters: SearchIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOIntegrationBaseDTO>>;

    /**
     */
    searchIntegrations(requestParameters: SearchIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOIntegrationBaseDTO>;

    /**
     * 
     * @param {string} integrationId 
     * @param {IntegrationEditDTO} integrationEditDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationControllerApiInterface
     */
    updateIntegrationRaw(requestParameters: UpdateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    updateIntegration(requestParameters: UpdateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class IntegrationControllerApi extends runtime.BaseAPI implements IntegrationControllerApiInterface {

    /**
     */
    async createIntegrationRaw(requestParameters: CreateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationModel>> {
        if (requestParameters.integrationEditDTO === null || requestParameters.integrationEditDTO === undefined) {
            throw new runtime.RequiredError('integrationEditDTO','Required parameter requestParameters.integrationEditDTO was null or undefined when calling createIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationEditDTOToJSON(requestParameters.integrationEditDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationModelFromJSON(jsonValue));
    }

    /**
     */
    async createIntegration(requestParameters: CreateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationModel> {
        const response = await this.createIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteIntegrationRaw(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling deleteIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration/delete/{integrationId}`.replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteIntegration(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getSingleIntegrationRaw(requestParameters: GetSingleIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationEditDTO>> {
        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling getSingleIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration/single/{integrationId}`.replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationEditDTOFromJSON(jsonValue));
    }

    /**
     */
    async getSingleIntegration(requestParameters: GetSingleIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationEditDTO> {
        const response = await this.getSingleIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkspaceIntegrationsRaw(requestParameters: GetWorkspaceIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntegrationBaseDTO>>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getWorkspaceIntegrations.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getWorkspaceIntegrations.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration/workspace-integrations/{workspaceId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationBaseDTOFromJSON));
    }

    /**
     */
    async getWorkspaceIntegrations(requestParameters: GetWorkspaceIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntegrationBaseDTO>> {
        const response = await this.getWorkspaceIntegrationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchIntegrationsRaw(requestParameters: SearchIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagingResponseDTOIntegrationBaseDTO>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling searchIntegrations.');
        }

        if (requestParameters.searchRequestDTO === null || requestParameters.searchRequestDTO === undefined) {
            throw new runtime.RequiredError('searchRequestDTO','Required parameter requestParameters.searchRequestDTO was null or undefined when calling searchIntegrations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration/search/{workspaceId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDTOToJSON(requestParameters.searchRequestDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagingResponseDTOIntegrationBaseDTOFromJSON(jsonValue));
    }

    /**
     */
    async searchIntegrations(requestParameters: SearchIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagingResponseDTOIntegrationBaseDTO> {
        const response = await this.searchIntegrationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateIntegrationRaw(requestParameters: UpdateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.integrationId === null || requestParameters.integrationId === undefined) {
            throw new runtime.RequiredError('integrationId','Required parameter requestParameters.integrationId was null or undefined when calling updateIntegration.');
        }

        if (requestParameters.integrationEditDTO === null || requestParameters.integrationEditDTO === undefined) {
            throw new runtime.RequiredError('integrationEditDTO','Required parameter requestParameters.integrationEditDTO was null or undefined when calling updateIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration/update/{integrationId}`.replace(`{${"integrationId"}}`, encodeURIComponent(String(requestParameters.integrationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationEditDTOToJSON(requestParameters.integrationEditDTO),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateIntegration(requestParameters: UpdateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateIntegrationRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetWorkspaceIntegrationsTypeEnum = {
    EMAIL: 'EMAIL',
    REST: 'REST',
    TELEGRAM: 'TELEGRAM',
    OPENAI: 'OPENAI'
} as const;
export type GetWorkspaceIntegrationsTypeEnum = typeof GetWorkspaceIntegrationsTypeEnum[keyof typeof GetWorkspaceIntegrationsTypeEnum];
