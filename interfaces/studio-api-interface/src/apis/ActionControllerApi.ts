/* tslint:disable */
/* eslint-disable */
/**
 * Bigration API
 * Bigration
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActionBaseDTO,
  ActionModel,
  InputParameter,
} from '../models';
import {
    ActionBaseDTOFromJSON,
    ActionBaseDTOToJSON,
    ActionModelFromJSON,
    ActionModelToJSON,
    InputParameterFromJSON,
    InputParameterToJSON,
} from '../models';

export interface AddInputParameterRequest {
    actionId: string;
    inputParameter: InputParameter;
}

export interface DeleteActionRequest {
    actionId: string;
}

export interface DeleteInputParameterRequest {
    actionId: string;
    parameterName: string;
}

export interface GetActionInputParametersRequest {
    actionId: string;
}

export interface GetBaseActionRequest {
    actionId: string;
}

export interface GetSingleActionRequest {
    actionId: string;
}

export interface GetWorkflowActionsRequest {
    workflowId: string;
}

export interface UpdateInputParameterRequest {
    actionId: string;
    inputParameter: InputParameter;
}

export interface UpdateWorkflowActionRequest {
    actionId: string;
    actionModel: ActionModel;
}

/**
 * ActionControllerApi - interface
 * 
 * @export
 * @interface ActionControllerApiInterface
 */
export interface ActionControllerApiInterface {
    /**
     * 
     * @param {string} actionId 
     * @param {InputParameter} inputParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    addInputParameterRaw(requestParameters: AddInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InputParameter>>;

    /**
     */
    addInputParameter(requestParameters: AddInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InputParameter>;

    /**
     * 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    deleteActionRaw(requestParameters: DeleteActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteAction(requestParameters: DeleteActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} actionId 
     * @param {string} parameterName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    deleteInputParameterRaw(requestParameters: DeleteInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InputParameter>>>;

    /**
     */
    deleteInputParameter(requestParameters: DeleteInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InputParameter>>;

    /**
     * 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    getActionInputParametersRaw(requestParameters: GetActionInputParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InputParameter>>>;

    /**
     */
    getActionInputParameters(requestParameters: GetActionInputParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InputParameter>>;

    /**
     * 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    getBaseActionRaw(requestParameters: GetBaseActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActionBaseDTO>>;

    /**
     */
    getBaseAction(requestParameters: GetBaseActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActionBaseDTO>;

    /**
     * 
     * @param {string} actionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    getSingleActionRaw(requestParameters: GetSingleActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActionModel>>;

    /**
     */
    getSingleAction(requestParameters: GetSingleActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActionModel>;

    /**
     * 
     * @param {string} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    getWorkflowActionsRaw(requestParameters: GetWorkflowActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActionModel>>>;

    /**
     */
    getWorkflowActions(requestParameters: GetWorkflowActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActionModel>>;

    /**
     * 
     * @param {string} actionId 
     * @param {InputParameter} inputParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    updateInputParameterRaw(requestParameters: UpdateInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InputParameter>>;

    /**
     */
    updateInputParameter(requestParameters: UpdateInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InputParameter>;

    /**
     * 
     * @param {string} actionId 
     * @param {ActionModel} actionModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionControllerApiInterface
     */
    updateWorkflowActionRaw(requestParameters: UpdateWorkflowActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActionModel>>;

    /**
     */
    updateWorkflowAction(requestParameters: UpdateWorkflowActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActionModel>;

}

/**
 * 
 */
export class ActionControllerApi extends runtime.BaseAPI implements ActionControllerApiInterface {

    /**
     */
    async addInputParameterRaw(requestParameters: AddInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InputParameter>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling addInputParameter.');
        }

        if (requestParameters.inputParameter === null || requestParameters.inputParameter === undefined) {
            throw new runtime.RequiredError('inputParameter','Required parameter requestParameters.inputParameter was null or undefined when calling addInputParameter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/action/add/input-parameter/{actionId}`.replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InputParameterToJSON(requestParameters.inputParameter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InputParameterFromJSON(jsonValue));
    }

    /**
     */
    async addInputParameter(requestParameters: AddInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InputParameter> {
        const response = await this.addInputParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteActionRaw(requestParameters: DeleteActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling deleteAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/action/delete/{actionId}`.replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAction(requestParameters: DeleteActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteActionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteInputParameterRaw(requestParameters: DeleteInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InputParameter>>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling deleteInputParameter.');
        }

        if (requestParameters.parameterName === null || requestParameters.parameterName === undefined) {
            throw new runtime.RequiredError('parameterName','Required parameter requestParameters.parameterName was null or undefined when calling deleteInputParameter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/action/delete/input-parameter/{actionId}/parameter/{parameterName}`.replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters.actionId))).replace(`{${"parameterName"}}`, encodeURIComponent(String(requestParameters.parameterName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InputParameterFromJSON));
    }

    /**
     */
    async deleteInputParameter(requestParameters: DeleteInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InputParameter>> {
        const response = await this.deleteInputParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getActionInputParametersRaw(requestParameters: GetActionInputParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InputParameter>>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling getActionInputParameters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/action/list/input-parameter/{actionId}`.replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InputParameterFromJSON));
    }

    /**
     */
    async getActionInputParameters(requestParameters: GetActionInputParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InputParameter>> {
        const response = await this.getActionInputParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBaseActionRaw(requestParameters: GetBaseActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActionBaseDTO>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling getBaseAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/action/base-action/{actionId}`.replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionBaseDTOFromJSON(jsonValue));
    }

    /**
     */
    async getBaseAction(requestParameters: GetBaseActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActionBaseDTO> {
        const response = await this.getBaseActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSingleActionRaw(requestParameters: GetSingleActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActionModel>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling getSingleAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/action/single/{actionId}`.replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionModelFromJSON(jsonValue));
    }

    /**
     */
    async getSingleAction(requestParameters: GetSingleActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActionModel> {
        const response = await this.getSingleActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkflowActionsRaw(requestParameters: GetWorkflowActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ActionModel>>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/action/workflow-actions/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActionModelFromJSON));
    }

    /**
     */
    async getWorkflowActions(requestParameters: GetWorkflowActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ActionModel>> {
        const response = await this.getWorkflowActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateInputParameterRaw(requestParameters: UpdateInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InputParameter>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling updateInputParameter.');
        }

        if (requestParameters.inputParameter === null || requestParameters.inputParameter === undefined) {
            throw new runtime.RequiredError('inputParameter','Required parameter requestParameters.inputParameter was null or undefined when calling updateInputParameter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/action/update/input-parameter/{actionId}`.replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InputParameterToJSON(requestParameters.inputParameter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InputParameterFromJSON(jsonValue));
    }

    /**
     */
    async updateInputParameter(requestParameters: UpdateInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InputParameter> {
        const response = await this.updateInputParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWorkflowActionRaw(requestParameters: UpdateWorkflowActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActionModel>> {
        if (requestParameters.actionId === null || requestParameters.actionId === undefined) {
            throw new runtime.RequiredError('actionId','Required parameter requestParameters.actionId was null or undefined when calling updateWorkflowAction.');
        }

        if (requestParameters.actionModel === null || requestParameters.actionModel === undefined) {
            throw new runtime.RequiredError('actionModel','Required parameter requestParameters.actionModel was null or undefined when calling updateWorkflowAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/action/update/{actionId}`.replace(`{${"actionId"}}`, encodeURIComponent(String(requestParameters.actionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ActionModelToJSON(requestParameters.actionModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionModelFromJSON(jsonValue));
    }

    /**
     */
    async updateWorkflowAction(requestParameters: UpdateWorkflowActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActionModel> {
        const response = await this.updateWorkflowActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
